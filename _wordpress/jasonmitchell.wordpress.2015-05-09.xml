<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.1.5" created="2015-05-09 11:09" -->
<rss version="2.0"
    xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
    <title>Jason Mitchell</title>
    <link>http://jason-mitchell.com</link>
    <description></description>
    <pubDate>Sat, 09 May 2015 11:09:16 +0000</pubDate>
    <language>en-US</language>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>http://jason-mitchell.com</wp:base_site_url>
    <wp:base_blog_url>http://jason-mitchell.com</wp:base_blog_url>

    <wp:author><wp:author_id>1</wp:author_id><wp:author_login>jmitch18</wp:author_login><wp:author_email>jasonmitchell@live.co.uk</wp:author_email><wp:author_display_name><![CDATA[Jason]]></wp:author_display_name><wp:author_first_name><![CDATA[Jason]]></wp:author_first_name><wp:author_last_name><![CDATA[Mitchell]]></wp:author_last_name></wp:author>

    <wp:category><wp:term_id>40</wp:term_id><wp:category_nicename>developer-tools</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Developer Tools]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>50</wp:term_id><wp:category_nicename>game-development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Game Development]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>mobile-dev</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mobile Development]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>quick-tip</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Quick Tip]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>45</wp:term_id><wp:category_nicename>software-development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Software Development]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>university</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[University]]></wp:cat_name></wp:category>
    <wp:category><wp:term_id>35</wp:term_id><wp:category_nicename>web-development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web Development]]></wp:cat_name></wp:category>
    <wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug>net</wp:tag_slug><wp:tag_name><![CDATA[.net]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>2d-graphics</wp:tag_slug><wp:tag_name><![CDATA[2D Graphics]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>3d-graphics</wp:tag_slug><wp:tag_name><![CDATA[3D Graphics]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>amd</wp:tag_slug><wp:tag_name><![CDATA[amd]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>asp-net-2</wp:tag_slug><wp:tag_name><![CDATA[asp.net]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>asp-net-mvc</wp:tag_slug><wp:tag_name><![CDATA[ASP.NET MVC]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>aspnetmvc-knockoutjs-quickstart</wp:tag_slug><wp:tag_name><![CDATA[aspnetmvc-knockoutjs-quickstart]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>baas</wp:tag_slug><wp:tag_name><![CDATA[baas]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>backend</wp:tag_slug><wp:tag_name><![CDATA[backend]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>bing</wp:tag_slug><wp:tag_name><![CDATA[bing]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>books</wp:tag_slug><wp:tag_name><![CDATA[books]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>buddy</wp:tag_slug><wp:tag_name><![CDATA[buddy]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>c-2</wp:tag_slug><wp:tag_name><![CDATA[c#]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>code-generation</wp:tag_slug><wp:tag_name><![CDATA[Code Generation]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>code-structure</wp:tag_slug><wp:tag_name><![CDATA[code structure]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>data-access</wp:tag_slug><wp:tag_name><![CDATA[data access]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>data-migration</wp:tag_slug><wp:tag_name><![CDATA[data migration]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>data-structures</wp:tag_slug><wp:tag_name><![CDATA[data structures]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[database]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>debugging</wp:tag_slug><wp:tag_name><![CDATA[debugging]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>exceptions</wp:tag_slug><wp:tag_name><![CDATA[exceptions]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>extension-method</wp:tag_slug><wp:tag_name><![CDATA[extension method]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>game-physics</wp:tag_slug><wp:tag_name><![CDATA[Game Physics]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>github</wp:tag_slug><wp:tag_name><![CDATA[github]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>imagine-cup</wp:tag_slug><wp:tag_name><![CDATA[Imagine Cup]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>infrastructure</wp:tag_slug><wp:tag_name><![CDATA[infrastructure]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>isolated-storage</wp:tag_slug><wp:tag_name><![CDATA[Isolated Storage]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>kinect-2</wp:tag_slug><wp:tag_name><![CDATA[kinect]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>knockoutjs</wp:tag_slug><wp:tag_name><![CDATA[knockoutjs]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>linq-to-sql</wp:tag_slug><wp:tag_name><![CDATA[linq to sql]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>microsoft</wp:tag_slug><wp:tag_name><![CDATA[microsoft]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>mobile-development</wp:tag_slug><wp:tag_name><![CDATA[mobile development]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>momentjs</wp:tag_slug><wp:tag_name><![CDATA[momentjs]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>monogame</wp:tag_slug><wp:tag_name><![CDATA[monogame]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>multiplayer</wp:tag_slug><wp:tag_name><![CDATA[multiplayer]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug>mvc</wp:tag_slug><wp:tag_name><![CDATA[mvc]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>mvvm</wp:tag_slug><wp:tag_name><![CDATA[mvvm]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>natural-user-interface</wp:tag_slug><wp:tag_name><![CDATA[natural user interface]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>nhibernate</wp:tag_slug><wp:tag_name><![CDATA[nhibernate]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>nui</wp:tag_slug><wp:tag_name><![CDATA[nui]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>observable</wp:tag_slug><wp:tag_name><![CDATA[observable]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>particle-system</wp:tag_slug><wp:tag_name><![CDATA[particle system]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[performance]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>physx</wp:tag_slug><wp:tag_name><![CDATA[PhysX]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>plugins</wp:tag_slug><wp:tag_name><![CDATA[plugins]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>powershell-2</wp:tag_slug><wp:tag_name><![CDATA[powershell]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>query</wp:tag_slug><wp:tag_name><![CDATA[query]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>quick-tip-2</wp:tag_slug><wp:tag_name><![CDATA[quick tip]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>regions</wp:tag_slug><wp:tag_name><![CDATA[regions]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug>release</wp:tag_slug><wp:tag_name><![CDATA[release]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>repository</wp:tag_slug><wp:tag_name><![CDATA[repository]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>requirejs</wp:tag_slug><wp:tag_name><![CDATA[requirejs]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>sample</wp:tag_slug><wp:tag_name><![CDATA[sample]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>sharepoint</wp:tag_slug><wp:tag_name><![CDATA[sharepoint]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>silverlight-2</wp:tag_slug><wp:tag_name><![CDATA[silverlight]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>software-craftmanship</wp:tag_slug><wp:tag_name><![CDATA[software craftmanship]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>standards</wp:tag_slug><wp:tag_name><![CDATA[standards]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>t4</wp:tag_slug><wp:tag_name><![CDATA[T4]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>talks</wp:tag_slug><wp:tag_name><![CDATA[talks]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>tic-tac-toe</wp:tag_slug><wp:tag_name><![CDATA[tic tac toe]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[tools]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>touch</wp:tag_slug><wp:tag_name><![CDATA[touch]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[twitter]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>unit-testing</wp:tag_slug><wp:tag_name><![CDATA[Unit Testing]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>visual-studio</wp:tag_slug><wp:tag_name><![CDATA[visual studio]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>wcf-2</wp:tag_slug><wp:tag_name><![CDATA[wcf]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>web-services</wp:tag_slug><wp:tag_name><![CDATA[web services]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[windows]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug>windows-8-2</wp:tag_slug><wp:tag_name><![CDATA[windows 8]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>windows-phone-2</wp:tag_slug><wp:tag_name><![CDATA[windows phone]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>windows-store</wp:tag_slug><wp:tag_name><![CDATA[windows store]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>winrt</wp:tag_slug><wp:tag_name><![CDATA[winrt]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>wp</wp:tag_slug><wp:tag_name><![CDATA[wp]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>xaml</wp:tag_slug><wp:tag_name><![CDATA[xaml]]></wp:tag_name></wp:tag>
    <wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>xna-2</wp:tag_slug><wp:tag_name><![CDATA[xna]]></wp:tag_name></wp:tag>
    <wp:term><wp:term_id>101</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>contact</wp:term_slug><wp:term_name><![CDATA[Contact]]></wp:term_name></wp:term>
    <wp:term><wp:term_id>28</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>links</wp:term_slug><wp:term_name><![CDATA[Links]]></wp:term_name></wp:term>

    <generator>http://wordpress.org/?v=4.1.5</generator>

    <item>
        <title>Twitter</title>
        <link>http://jason-mitchell.com/uncategorized/twitter/</link>
        <pubDate>Mon, 19 Mar 2012 20:11:43 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=5</guid>
        <description></description>
        <content:encoded><![CDATA[]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>5</wp:post_id>
        <wp:post_date>2012-03-19 20:11:43</wp:post_date>
        <wp:post_date_gmt>2012-03-19 20:11:43</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>twitter</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>1</wp:menu_order>
        <wp:post_type>nav_menu_item</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="nav_menu" nicename="links"><![CDATA[Links]]></category>
        <wp:postmeta>
            <wp:meta_key>_menu_item_type</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object_id</wp:meta_key>
            <wp:meta_value><![CDATA[5]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_classes</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_xfn</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_url</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.twitter.com/jmitch18]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>LinkedIn</title>
        <link>http://jason-mitchell.com/uncategorized/linkedin/</link>
        <pubDate>Mon, 19 Mar 2012 20:11:44 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=6</guid>
        <description></description>
        <content:encoded><![CDATA[]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>6</wp:post_id>
        <wp:post_date>2012-03-19 20:11:44</wp:post_date>
        <wp:post_date_gmt>2012-03-19 20:11:44</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>linkedin</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>2</wp:menu_order>
        <wp:post_type>nav_menu_item</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="nav_menu" nicename="links"><![CDATA[Links]]></category>
        <wp:postmeta>
            <wp:meta_key>_menu_item_type</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object_id</wp:meta_key>
            <wp:meta_value><![CDATA[6]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_classes</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_xfn</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_url</wp:meta_key>
            <wp:meta_value><![CDATA[http://uk.linkedin.com/in/jasonmitchell89]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>XNA First Person Camera</title>
        <link>http://jason-mitchell.com/game-development/xna-first-person-camera/</link>
        <pubDate>Thu, 27 Aug 2009 21:01:42 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/?p=75</guid>
        <description></description>
        <content:encoded><![CDATA[As I previously mentioned, I plan on updating this blog with my experience of learning 3D XNA and hopefully be able to help out others doing the same as well as receive a bit of feedback and advice on how to improve the work I have done.  The first section I began working on was the camera for the game.  Since my game is being planned for the Xbox Live Indie Games, the tutorial below is intended to work with the Xbox 360 game pad although with a little modification it should be possible to use it on the PC.

<!--more-->

The current view and field of vision are defined in two matrices; the <strong>View matrix</strong> and the <strong>Projection matrix</strong>.

In order to define the the <strong>View matrix</strong> we need 3 Vector3 objects; one for the position of the camera, one for the target the camera is pointing at and a vector defining which way is up for the camera. We don't need to worry about what goes on to define the <strong>View matrix</strong> as the Matrix class in XNA provides a method called<strong> CreateLookAt</strong> which accepts the position, target and up vectors as parameters and returns the view matrix.
<pre lang="csharp">Matrix viewMatrix = Matrix.CreateLookAt(position, target, upVector);</pre>
To create the <strong>Projection matrix</strong>, we need to know the angle of the field of view in radians, the aspect ratio of the screen, the near plane distance and the far plane distance. The near and far planes dictate the planes to draw between, everything outside of these planes will not be rendered. It is worth remembering that setting a very low near plane and a very large far plane may negatively impact your games performance if there is a lot going on. As with the View matrix, we do not need to worry too much about the details about how the <strong>Projection matrix</strong> is created as XNA again provides a useful method for this:
<pre lang="csharp">projectionMatrix= Matrix.CreatePerspectiveFieldOfView(MathHelper.PiOver4, GraphicsDevice.Viewport.AspectRatio, 1, 400);</pre>
For my game, I decided to make a base<strong> camera</strong> class which handles all this for me so I don't need to worry about it again.  The code for this class is very straight forward and simply handles the basic camera functionality.

Camera.cs
<pre lang="csharp">using Microsoft.Xna.Framework;

namespace Cameras
{
    public class Camera : GameComponent
    {
        public Vector3 position;
        public Vector3 target;
        public Vector3 upVector;

        public Matrix viewMatrix;
        public Matrix projectionMatrix;
        public float fieldOfView = MathHelper.PiOver4;
        public float nearPlaneDistance = 1f;
        public float farPlaneDistance = 500f;

        public Camera(Game game, Vector3 position, Vector3 target, Vector3 upVector)
            : base(game)
        {
            this.position = position;
            this.target = target;
            this.upVector = upVector;
        }

        public override void Initialize()
        {
            UpdateViewMatrix();
            float aspectRatio = Game.GraphicsDevice.Viewport.AspectRatio;
            projectionMatrix= Matrix.CreatePerspectiveFieldOfView(fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance);

            base.Initialize();
        }

        protected void UpdateViewMatrix()
        {
            viewMatrix = Matrix.CreateLookAt(position, target, upVector);
        }
    }
}</pre>
For this class, I have made all it's variables public for the purposes of this article so the code is much shorter.  I would strongly recommend encapsulating these variables if you are using it in any of your projects.

All this class does is allow us to point the camera in one direction and does not have any built in functionality for movement so that is our next step.  So far, I've always found myself wanting to be able to move around and get a better look at what I'm currently working on, so for that reason my next step was to create a <strong>first person camera</strong>.  This was a bit trickier, however with a bit of playing around I was eventually able to get it working!  Following is the code for the class and then I will explain it a bit afterwards.

FirstPersonCamera.cs
<pre lang="csharp">using Microsoft.Xna.Framework;

namespace Cameras
{
    public class FirstPersonCamera : Camera
    {
        public Vector3 cameraReference;

        public float leftRightRot;
        public float upDownRot;

        public float rotationSpeed = 0.05f;
        public float translationSpeed = 1f;

        public FirstPersonCamera(Game game, Vector3 position, Vector3 target, Vector3 upVector)
            : base(game, position, target, upVector)
        {
            cameraReference = target;
        }

        public void Update(Vector3 translation, float leftRightRot, float upDownRot)
        {
            this.leftRightRot += leftRightRot * rotationSpeed;
            this.upDownRot += upDownRot * rotationSpeed;
            Matrix rotationMatrix = Matrix.CreateRotationX(this.upDownRot) * Matrix.CreateRotationY(this.leftRightRot);
            Vector3 transformedReference = Vector3.Transform(cameraReference, rotationMatrix);
            position += Vector3.Transform(translation, rotationMatrix) * translationSpeed;
            target = transformedReference + position;

            UpdateViewMatrix();
        }
    }
}</pre>
<span style="color: #ff0000;"><strong><em>UPDATE:</em></strong> Tony Peng pointed out in the comments that rotating too far would reverse the controls.  Please see his solution in the comments section below.</span>

Possibly the most important part of this is the <strong>cameraReference</strong> variable.  This holds the <strong>original target vector</strong> we set up for our camera and is used for calculating our resulting camera target after rotation.  This was the part that was catching me out for a little while!  The<strong> leftRightRot</strong> and <strong>upDownRot</strong> variables keep track of how far we have moved from the <strong>original target</strong> and are also used in calculating our<strong> rotated camera target</strong>.

I created a new<strong> Update</strong> method that accepts the <strong>translation</strong> (ie the amout to move the camera by),<strong> left-right rotation</strong> and <strong>up-down rotation</strong> as parameters.  My next step was to add this onto my<strong> rotation variables and create the rotation matrix</strong>.  The purpose for adding the rotations to my class variables rather than just assigning them, is so that the<strong> camera rotation will persist</strong> even after, for example, the thumbstick has been released and is at it default position.  If we were to just assign the rotations to the variables, The camera would have limited movement in the desired direction and then reset to the centre once the thumbstick has been released.

Now that I have the <strong>rotation matrix</strong>, I can use this, along with the <strong>cameraReference</strong> the calculate the <strong>rotated camera target</strong>.  All that is left to do is to<strong> calculate the rotated translation</strong>, <strong>add it to the camera position</strong> and set the<strong> new camera target by adding our transformedReference to the camera position</strong>.  Finally we called the <strong>UpdateViewMatrix</strong> method from the Camera class to generate our new view matrix.

It is worth noting that if you are rotating in any possible combination of the x, y and z axis, you may encounter an issue known as <a href="http://en.wikipedia.org/wiki/Gimbal_lock" target="_blank">Gimbal Lock</a>.  I have read that this can be solved by using<strong> Quaternions</strong> for the rotations but I have yet to look into this too much.  If anyone has any useful information about how to do this please let me know!

Lastly we will need a way to test our camera out so here is a small class I used for my testing; I'm not going to explain it as it's all fairly straight forward!

Game1.cs
<pre lang="csharp">using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace Cameras
{
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        private GraphicsDeviceManager graphics;

        private FirstPersonCamera camera;
        private VertexPositionColor[] verts;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        protected override void Initialize()
        {
            camera = new FirstPersonCamera(this, new Vector3(0, 0, 20), Vector3.Forward, Vector3.Up);
            Components.Add(camera);

            base.Initialize();
        }

        protected override void LoadContent()
        {
            verts = new VertexPositionColor[4];
            verts[0] = new VertexPositionColor(new Vector3(-3, -3, 0), Color.Red);
            verts[1] = new VertexPositionColor(new Vector3(3, -3, 0), Color.Green);
            verts[2] = new VertexPositionColor(new Vector3(-3, 3, 0), Color.Blue);
            verts[3] = new VertexPositionColor(new Vector3(3, 3, 0), Color.Yellow);
        }

        protected override void UnloadContent()
        {

        }

        protected override void Update(GameTime gameTime)
        {
            GamePadState gamepadState = GamePad.GetState(PlayerIndex.One);

            if (gamepadState.Buttons.Back == ButtonState.Pressed)
                this.Exit();

            Vector3 translation = new Vector3(gamepadState.ThumbSticks.Left.X, 0, -gamepadState.ThumbSticks.Left.Y);
            camera.Update(translation, -gamepadState.ThumbSticks.Right.X, gamepadState.ThumbSticks.Right.Y);

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);
            GraphicsDevice.RenderState.CullMode = CullMode.None;

            GraphicsDevice.VertexDeclaration = new VertexDeclaration(GraphicsDevice, VertexPositionColor.VertexElements);

            BasicEffect effect = new BasicEffect(GraphicsDevice, null);
            effect.World = Matrix.Identity;
            effect.View = camera.viewMatrix;
            effect.Projection = camera.projectionMatrix;

            effect.VertexColorEnabled = true;

            effect.Begin();
            foreach (EffectPass pass in effect.CurrentTechnique.Passes)
            {
                pass.Begin();
                GraphicsDevice.DrawUserPrimitives(PrimitiveType.TriangleStrip, verts, 0, 2);
                pass.End();
            }
            effect.End();

            base.Draw(gameTime);
        }
    }
}</pre>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>75</wp:post_id>
        <wp:post_date>2009-08-27 21:01:42</wp:post_date>
        <wp:post_date_gmt>2009-08-27 21:01:42</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-first-person-camera</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="3d-graphics"><![CDATA[3D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/mD4CwM]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=75]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: XNA First Person Camera http://bit.ly/mD4CwM]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A tutorial on creating a simple first person camera using the xbox 360 game pad]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA First Person Camera]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,3d,first,person,camera,tutorial,xbox,fps]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A tutorial on creating a simple first person camera using the xbox 360 game pad]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,3d,first,person,camera,tutorial,xbox,fps]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA First Person Camera]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338026]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[79]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[camera]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430479320;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:177;}i:1;a:1:{s:2:"id";i:204;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>2</wp:comment_id>
            <wp:comment_author><![CDATA[XNA 3D Terrain | Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com/index.php/2009/08/30/xna-3d-terrain/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2009-08-30 16:06:08</wp:comment_date>
            <wp:comment_date_gmt>2009-08-30 15:06:08</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[...] created my own first person camera, I moved on to creating some 3D terrain for my game.&#160; I have to admit, I cheated on this a bit [...] ]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>3</wp:comment_id>
            <wp:comment_author><![CDATA[Wordpress Stats Plug-in Not Counting | Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com/index.php/2009/09/27/wordpress-stats-plug-in-not-counting/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2009-09-27 14:48:55</wp:comment_date>
            <wp:comment_date_gmt>2009-09-27 13:48:55</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[...] blog gets and in particular what the most popular articles are.&#160; At the minute, it seems to be my article on a first person camera in XNA and my article about iPhone development.&#160; However, for the past month or so the plug-in [...] ]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>4</wp:comment_id>
            <wp:comment_author><![CDATA[Patrick]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-05-09 20:33:00</wp:comment_date>
            <wp:comment_date_gmt>2010-05-09 19:33:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hey Jason,
Great Tutorial but I am having some issues running the project. I followed the tut exactly and when I build the project and run it, this error pops up.

'Cameras.Camera' does not contain a definition for 'ViewMatrix'

Any help would be greatly appreciated.
Thanks.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>5</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-05-11 13:43:03</wp:comment_date>
            <wp:comment_date_gmt>2010-05-11 12:43:03</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Patrick,

Looks like it could be a case sensitivity issue if you are using my Camera class exactly as it is above.  Your error says you are using "ViewMatrix" (with an uppercase 'V' at the start) however my Camera class declares the variable "public Matrix viewMatrix" (note lowercase 'v').

If you are using that class, I would definately recommend making the variables private and wrapping them in a property.

Hope this helps.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>6</wp:comment_id>
            <wp:comment_author><![CDATA[Tony Peng]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-12-22 07:43:14</wp:comment_date>
            <wp:comment_date_gmt>2010-12-22 06:43:14</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Nice tutorial, Jason!

I have one question though.

As I press my left stick forward, the Y increases as the Z decreases.
Shouldn't only the Z value be changing?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>7</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-12-24 12:41:46</wp:comment_date>
            <wp:comment_date_gmt>2010-12-24 11:41:46</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks Tony.

I had a quick look at this and I think I see what you mean.  This happens after you rotate the camera up or down with the right thumbstick and then you move forward the camera will freely move in 3D space.  Am I right in guessing that the behaviour you are looking for is that when the player looks up and then moves forward, they will stay on the same plane while moving like in conventional FPS games?

In order to stop the player's Y component being modified after rotation you need to remove the rotation around the X axis for the translation transform.

Update the position changing line in the Update method of FirstPersonCamera to:

position += Vector3.Transform(translation, Matrix.CreateRotationY(this.leftRightRot)) * translationSpeed;

This will only transform the camera position around the Y axis (ie looking left and right).

Hope that helps]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>8</wp:comment_id>
            <wp:comment_author><![CDATA[Tony Peng]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-25 22:14:32</wp:comment_date>
            <wp:comment_date_gmt>2011-02-25 21:14:32</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sorry for this *very* late reply, but that solved it.
I also suggest that you change it a bit so that if you move the right stick too much, it won't reverse the controls.

Here's what I implemented to solve this:
if (Math.Abs(this.upDownRot + (upDownRot * rotationSpeed)) &lt; 1.0f)
                this.upDownRot += upDownRot * rotationSpeed;
            else
            {
                if (this.upDownRot  0)
                    this.upDownRot += upDownRot * rotationSpeed;
                else if (this.upDownRot &gt; 0 &amp;&amp; upDownRot &lt; 0)
                    this.upDownRot += upDownRot * rotationSpeed;
            }

it&#039;s probably not the best way to approach this, but it works for me. :)]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>9</wp:comment_id>
            <wp:comment_author><![CDATA[Tony Peng]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-25 22:15:46</wp:comment_date>
            <wp:comment_date_gmt>2011-02-25 21:15:46</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Apparently it messed up.  The last else statement is supposed to be:
else
            {
                if (this.upDownRot  0)
                    this.upDownRot += upDownRot * rotationSpeed;
                else if (this.upDownRot &gt; 0 &amp;&amp; upDownRot &lt; 0)
                    this.upDownRot += upDownRot * rotationSpeed;
            }]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>10</wp:comment_id>
            <wp:comment_author><![CDATA[Tony Peng]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-25 22:16:25</wp:comment_date>
            <wp:comment_date_gmt>2011-02-25 21:16:25</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[if (this.upDownRot ( 0)
                    this.upDownRot += upDownRot * rotationSpeed;

Sorry for all this massive spammage. :P]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>11</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-03-01 22:24:55</wp:comment_date>
            <wp:comment_date_gmt>2011-03-01 21:24:55</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Glad that helped!

I'd noticed the reversing of the controls myself and had implemented something similar to what you have posted in a project I had been using similar code to the stuff in the article.  I'll update the article to point this out.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>12</wp:comment_id>
            <wp:comment_author><![CDATA[Tony Peng]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-03-14 04:23:03</wp:comment_date>
            <wp:comment_date_gmt>2011-03-14 03:23:03</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Haha, I guess the blog just doesn't want me to post that snippet.

it's just the opposite of the else, which checks if the class upDownRot is less than 0, and the parameter is greater than 0.

Hopefully this time it won't censor out the entire block of text up there and replace it with a 0. :P]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
    </item>
    <item>
        <title>XNA 3D Terrain</title>
        <link>http://jason-mitchell.com/game-development/xna-3d-terrain/</link>
        <pubDate>Sun, 30 Aug 2009 16:06:02 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2009/08/30/xna-3d-terrain/</guid>
        <description></description>
        <content:encoded><![CDATA[<p align="justify">Having created my own <a href="http://www.jason-mitchell.com/index.php/2009/08/27/xna-first-person-camera/" target="_blank">first person camera</a>, I moved on to creating some 3D terrain for my game.  I have to admit, I cheated on this a bit and just used the custom content pipeline from the <a href="http://creators.xna.com" target="_blank">XNA Creators Club</a>’s generated geometry sample found <a href="http://http://creators.xna.com/en-GB/sample/generatedgeometry" target="_blank">here</a>.  For this reason, I currently do not fully understand the process of creating terrain from a height map despite despite understanding the basic theory behind it.  For this reason I can’t really provide a guide as to how to code it yourself at the minute but I will hopefully be able to do this in the future.</p>
<!--more-->
<p align="justify">The sample from the creators club website isn’t without it’s flaws; it’s a great way to easily get terrain in your game however it does hard code the name of the height map and it’s texture in the processor itself.  This doesn’t provide much flexibility at all and isn’t an ideal solution.  I will be looking into whether or not it is possible to pass in extra details to the processor (ie the height map file) which would provide a much nicer solution.  I also want to remove the texturing from the processor and do this via an <a href="http://en.wikipedia.org/wiki/HLSL" target="_blank">HLSL</a> effects file and provide multi <a href="http://en.wikipedia.org/wiki/Texture_splatting" target="_blank">texture splatting</a> functionality.  If anyone knows a good resource for information on this please feel free to leave a comment.</p>
<p align="justify">Despite using a ready made processor for loading my terrain, my experience with getting this working wasn’t so simple due to some <a href="http://en.wikipedia.org/wiki/Microsoft_XNA" target="_blank">XNA</a> functionality that seems relatively undocumented and doesn’t seem to come up in 3D tutorials.  When setting up my terrain, I was completely unaware that my use of a SpriteBatch object to draw some debug text to the screen would modify the GraphicsDevice render states and not reset them.  This resulted in the errors seen in the two following images:</p>
<p align="justify"><a href="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/renderError.jpg"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="renderError" alt="renderError" src="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/renderError_thumb.jpg" width="452" height="235" border="0" /></a> <a href="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/textureStretch.jpg"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="textureStretch" alt="textureStretch" src="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/textureStretch_thumb.jpg" width="402" height="235" border="0" /></a></p>
<p align="justify">The image on the left was caused by the SpriteBatch object disabling the depth buffer on the GraphicsDevice.  This will allow parts of the scene in the background to appear to be drawn in front of larger foreground sections.  The problem on the right was caused by the SpriteBatch object changing the UV coordinates for the texture sampler.  To fix this, I simply added the following code just before rendering my terrain:</p>

<div class="csharpcode">
<div class="csharpcode">
<pre class="alt">GraphicsDevice.RenderState.DepthBufferEnable = <span class="kwrd">true</span>;</pre>
<pre>GraphicsDevice.SamplerStates[0].AddressU = TextureAddressMode.Wrap;</pre>
<pre class="alt">GraphicsDevice.SamplerStates[0].AddressV = TextureAddressMode.Wrap;</pre>
</div>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></div>
<!--.csharpcode, .csharpcode pre {     font-size: small;     color: black;     font-family: consolas, "Courier New", courier, monospace;     background-color: #ffffff;     /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  {     background-color: #f4f4f4;     width: 100%;     margin: 0em; } .csharpcode .lnum { color: #606060; } -->

For more information on the effects a SpriteBatch object will have on your render states, <a href="http://blogs.msdn.com/shawnhar/archive/2006/11/13/spritebatch-and-renderstates.aspx" target="_blank">check out this article</a> by Shawn Hargreaves.

After figuring all that out thanks to help of the community on the XNA Creators Club website, I got my terrain working quite well and looking relatively nice:

<a href="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/terrain.jpg"><img style="display: inline; border-width: 0px;" title="terrain" alt="terrain" src="http://www.jason-mitchell.com/images/blog/XNA3DTerrain_E030/terrain_thumb.jpg" width="695" height="400" border="0" /></a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>99</wp:post_id>
        <wp:post_date>2009-08-30 16:06:02</wp:post_date>
        <wp:post_date_gmt>2009-08-30 16:06:02</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-3d-terrain</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="3d-graphics"><![CDATA[3D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA 3D Terrain]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,3d,terrain,graphics,render,device,states]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[My progress with adding 3D terrain to my game and some of the problems I encountered.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: XNA 3D Terrain http://bit.ly/lwmCtB]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=99]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/lwmCtB]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[My progress with adding 3D terrain to my game and some of the problems I encountered.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,3d,terrain,graphics,render,device,states]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA 3D Terrain]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1461748871]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[88]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[terrain]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430753477;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:564;}i:1;a:1:{s:2:"id";i:204;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>1207</wp:comment_id>
            <wp:comment_author><![CDATA[simon]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-07-15 12:38:32</wp:comment_date>
            <wp:comment_date_gmt>2014-07-15 12:38:32</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Whilst this is good info :)  and it is.

I believe it is good form to use the provided .Wrap mode rather than setting the U and V yourself. :)

Thanks for the great tuts.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405427912.2381251;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405605686.5779679;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>MVVM for Silverlight (Windows Phone 7 App)</title>
        <link>http://jason-mitchell.com/mobile-dev/mvvm-for-silverlight-windows-phone-7-app/</link>
        <pubDate>Sun, 16 May 2010 18:26:49 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/05/16/mvvm-for-silverlight-windows-phone-7-app/</guid>
        <description></description>
        <content:encoded><![CDATA[<p style="text-align: justify;">For a little while now I've had a bit of interest in the Model View ViewModel (<a href="http://en.wikipedia.org/wiki/MVVM" target="_blank">MVVM</a>) pattern for <a href="http://www.silverlight.net" target="_blank">Silverlight</a> and <a href="http://msdn.microsoft.com/en-us/library/ms754130.aspx" target="_blank">WPF</a> so I thought I would finally give it a go and see if I could get an understanding of how to use this pattern.</p>
<!--more--><a href="http://www.jason-mitchell.com/images/blog/MVVMforSilverlightWindowsPhone7App_E533/image.png"><img style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 7px; display: inline; border-style: initial; border-color: initial; border-image: initial; border-width: 0px;" title="Twitter timeline application" alt="Twitter timeline application" src="http://www.jason-mitchell.com/images/blog/MVVMforSilverlightWindowsPhone7App_E533/image_thumb.png" width="191" height="377" align="right" border="0" /></a>
<p style="text-align: justify;">I had no prior knowledge of the details of MVVM so I needed to do a bit of research.  Thankfully, there seems to be no shortage of information on the web about it.  I found Wikipedia to have a useful article about it at <a title="http://en.wikipedia.org/wiki/MVVM" href="http://en.wikipedia.org/wiki/MVVM">http://en.wikipedia.org/wiki/MVVM</a> (especially the "Pattern Description" section) and also an article on <a href="http://msdn.microsoft.com/" target="_blank">MSDN</a> by <a href="http://wildermuth.com/" target="_blank">Shawn Wildermuth</a> at <a href="http://msdn.microsoft.com/en-us/magazine/dd458800.aspx">http://msdn.microsoft.com/en-us/magazine/dd458800.aspx</a>.  The second article is for Silverlight 2 so it's a little bit outdated, however I still found it incredibly useful.</p>
<p style="text-align: justify;">In this article I'm going to walkthrough the creation of the basic Windows Phone 7 Twitter application pictured to the right.  If you do not have the tools for Windows Phone 7 development, you can find some information about them at <a href="http://developer.windowsphone.com">t</a>he <a href="http://create.msdn.com" target="_blank">App Hub</a>.  If you have no interest in getting the tools, then you should find that most of the content in this article is applicable to a regular Silverlight project as well.  For this project, I used Expression Blend 4 RC and the Windows Phone add-in (see <a href="http://electricbeach.org/?p=671" target="_blank">here</a> for the April 2010 refresh) and Visual Studio 2010 Ultimate (but any version should do).</p>
<p style="text-align: justify;">I created a new Windows Phone Application project in Blend 4 and called it TwitterTimelineDemo and began by making some minor changes to the application and page titles as seen in the picture of my application.  Since this is just a quick application for experimentation, I have simply hardcoded my name into the TextBlock for the page title.</p>
<p style="text-align: justify;">Next I added a simple class called Tweet to represent all tweets in the user's timeline:</p>

<pre lang="csharp" escaped="true">using System;

namespace TwitterTimelineDemo
{
    public class Tweet
    {
        public string Status { get; set; }
        public DateTime Date { get; set; }
    }
}</pre>
<p style="text-align: justify;">This class would act as the <strong>Model</strong> in my application.  The Model is an object that represents the content to be displayed.  In this example I am keeping this very basic and only pulling in the user's status and the date it was posted.</p>
<p style="text-align: justify;">Now we will create our <strong>ViewModel</strong> class called TweetViewModel.  The ViewModel is an abstraction of our View and will present our Model in a consumable manner appropriate to the View.  Our ViewModel will populate and hold a collection of Tweet objects (our Model) that we can bind to in the View to present them to the user.  Here is the initial code for the basic ViewModel:</p>

<pre lang="csharp" escaped="true">using System.Collections.ObjectModel;

namespace TwitterTimelineDemo
{
    public class TweetViewModel
    {
        private readonly ObservableCollection&lt;Tweet&gt; tweets = new ObservableCollection&lt;Tweet&gt;();

        public ObservableCollection&lt;Tweet&gt; Tweets
        {
            get { return tweets; }
        }
    }
}</pre>
<p style="text-align: justify;"><a href="http://www.jason-mitchell.com/images/blog/MVVMforSilverlightWindowsPhone7App_E533/image_3.png"><img style="margin: 0px 5px 0px 0px; display: inline; border-width: 0px;" title="image" alt="image" src="http://www.jason-mitchell.com/images/blog/MVVMforSilverlightWindowsPhone7App_E533/image_thumb_3.png" width="277" height="102" align="left" border="0" /></a> Next, I created the <strong>View</strong> for my application.  The View refers to all our visual elements and will bind to our ViewModel.  At this point, we can now use Blend's sample data feature to style our View without needing to write any code to download tweets.  This is a great feature for designing an application in Blend.  We can create our sample data from an existing class in our project but first we will need to build it from Blend's project menu.  Once it has been built, we can open the Data pane on the right-hand side, click the second button from the right, and then select "Create Sample Data from Class..." and then select our TweetViewModel class from the list.</p>
<p style="text-align: justify;">In order to display our sample data, expand the TweetViewModel source and drag the Tweets collection to the controls LayoutRoot grid.  This will create a ListBox containing the sample data; reset it's margins to make it fill the entire grid.  You can now style the individual list items by editing the ListBox's ItemTemplate.</p>
<p style="text-align: justify;">Now we need to add our TweetView control to MainPage.xaml.  Drag TweetView from the Project section in the Assets pane on the left-hand side of the screen onto the ContentGrid of MainPage.xaml (if it is not there, try rebuilding the project).  Select the newly added control and reset the width and height, change the horizontal and vertical alignments to stretch and reset the margins so it fills the grid.  I don't see my sample data when I drag the control to MainPage.xaml and I suspect you can only see it in the control it was added to (<strong>any confirmation?</strong>).  At this stage, I am now done with MainPage.xaml and my XAML looks like:</p>

<pre lang="csharp" escaped="true">&lt;phoneNavigation:PhoneApplicationPage
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:phoneNavigation="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Navigation"
    xmlns:local="clr-namespace:TwitterTimelineDemo"
    x:Class="TwitterTimelineDemo.MainPage"
    FontFamily="{StaticResource PhoneFontFamilyNormal}"
    FontSize="{StaticResource PhoneFontSizeNormal}"
    Foreground="{StaticResource PhoneForegroundBrush}"&gt;

    &lt;Grid x:Name="LayoutRoot" Background="{StaticResource PhoneBackgroundBrush}"&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="Auto"/&gt;
            &lt;RowDefinition Height="*"/&gt;
        &lt;/Grid.RowDefinitions&gt;

        &lt;Grid x:Name="TitleGrid" Grid.Row="0"&gt;
            &lt;TextBlock Text="Twitter Timeline" x:Name="textBlockPageTitle" Style="{StaticResource PhoneTextPageTitle1Style}"/&gt;
            &lt;TextBlock Text="jmitch18" x:Name="textBlockListTitle" Style="{StaticResource PhoneTextPageTitle2Style}"/&gt;
        &lt;/Grid&gt;

        &lt;Grid x:Name="ContentGrid" Grid.Row="1"&gt;
            &lt;local:TweetView/&gt;
        &lt;/Grid&gt;
    &lt;/Grid&gt;

&lt;/phoneNavigation:PhoneApplicationPage&gt;</pre>
<p style="text-align: justify;">Now, we need to populate the ViewModel's tweet collection with real data.  Twitter feeds are downloaded in an XML format so I used LINQ to extract Tweets.  I added a project reference to System.Xml.Linq and created the following method called GetTwitterEntries in TweetViewModel.cs to return my tweets.  <strong>Be sure to add "using System.Linq;" and any other required using statements at the top of the class to prevent build errors.</strong></p>

<pre lang="csharp" escaped="true">private IEnumerable&lt;Tweet&gt; GetTwitterEntries(string twitterFeed)
{
    XNamespace atomNS = "http://www.w3.org/2005/Atom";
    XDocument feed = XDocument.Parse(twitterFeed);

    IEnumerable&lt;Tweet&gt; entries = from tweet in feed.Descendants(atomNS + "entry")
                                 select new Tweet
                                 {
                                     Status = (string)tweet.Element(atomNS + "title"),
                                     Date = DateTime.Parse((string)tweet.Element(atomNS + "published"))
                                 };

    return entries;
}</pre>
<p style="text-align: justify;">To get tweets for my username (jmitch18) I would use the URL <a href="http://search.twitter.com/search.atom?q=from%3Ajmitch18">http://search.twitter.com/search.atom?q=from%3Ajmitch18</a>.  To get tweets for any other user, just replace my name.  In production code, we would get the username from some more dynamic source, but for the purposes of experimentation I have opted for hard coding it.  I added the following constructor and event handler to my TweetViewModel class to populate it's collection with real data:</p>

<pre lang="csharp" escaped="true">public TweetViewModel()
{
    WebClient webClient = new WebClient();
    webClient.DownloadStringCompleted += new DownloadStringCompletedEventHandler(DownloadStringCompleted);
    webClient.DownloadStringAsync(new Uri("http://search.twitter.com/search.atom?q=from%3Ajmitch18", UriKind.Absolute));
}

private void DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
{
    foreach (Tweet tweet in GetTwitterEntries(e.Result))
        tweets.Add(tweet);
}</pre>
<p style="text-align: justify;">The last required step is to bind the ViewModel to the View.  I opened TweetView.xaml in Blend and selected it's LayoutRoot grid in the Objects pane.  Under the Common Properties section on the Properties pane, you will see a heading "DataContext"; click the "New" button next to it and select TweetViewModel from the list.  Now if you run the application, after a brief second for loading, you should see a list of real tweets displayed.</p>
<p style="text-align: justify;">This article is based on my current understanding of the MVVM pattern.  I would not say this code is production ready but I am open to constructive feedback and suggested improvements on the topic of this article.  Please feel free to contact me or use the comments section.</p>
<strong>Sample project: </strong><a href="http://www.jason-mitchell.com/uploads/TwitterTimelineDemo.zip">http://www.jason-mitchell.com/uploads/TwitterTimelineDemo.zip</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>136</wp:post_id>
        <wp:post_date>2010-05-16 18:26:49</wp:post_date>
        <wp:post_date_gmt>2010-05-16 18:26:49</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>mvvm-for-silverlight-windows-phone-7-app</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="mobile-dev"><![CDATA[Mobile Development]]></category>
        <category domain="post_tag" nicename="mvvm"><![CDATA[mvvm]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="silverlight-2"><![CDATA[silverlight]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[MVVM for Silverlight (Windows Phone 7 App)]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[silverlight,expression,blend,mvvm,twitter,windows phone 7,wp7,model,view,viewmodel,c#,tutorial]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A quick tutorial on creating a basic Twitter application for Windows Phone 7 using the Model View ViewModel (MVVM) pattern in Silverlight and Expression Blend.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: MVVM for Silverlight (Windows Phone 7 App) http://bit.ly/kUTzGU]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=136]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/kUTzGU]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A quick tutorial on creating a basic Twitter application for Windows Phone 7 using the Model View ViewModel (MVVM) pattern in Silverlight and Expression Blend.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[silverlight,expression,blend,mvvm,twitter,windows phone 7,wp7,model,view,viewmodel,c#,tutorial]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[MVVM for Silverlight (Windows Phone 7 App)]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338146]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[85]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[mvvm]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429732986;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:211;}i:1;a:1:{s:2:"id";i:526;}i:2;a:1:{s:2:"id";i:260;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>16</wp:comment_id>
            <wp:comment_author><![CDATA[Tosh]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.tosh.no</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-05-18 15:34:17</wp:comment_date>
            <wp:comment_date_gmt>2010-05-18 14:34:17</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Good example, with good explanations!

I used the same approach in a twitter feed library I wrote a few weeks ago, but I used the SyndicationFeed library to read the feed entries without having to use string identifiers. I also added a timer for updating recent tweets.

I posted some code on my blog if you're interested:
http://www.tosh.no/2010/05/streaming-tweets.html]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[947770086]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>17</wp:comment_id>
            <wp:comment_author><![CDATA[Laurent Bugnion]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://blog.galasoft.ch</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-05-18 16:38:19</wp:comment_date>
            <wp:comment_date_gmt>2010-05-18 15:38:19</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Nice article! For those who don't want to start from scratch, the MVVM Light toolkit also comes with a project template as well as DLLs for Windows Phone 7, allowing a great comfort and very extensive blendability :)

http://www.galasoft.ch/mvvm/getstarted

Cheers,
Laurent]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[947770088]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>18</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-05-18 20:42:21</wp:comment_date>
            <wp:comment_date_gmt>2010-05-18 19:42:21</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[@Tosh Nice article!  I haven't used the SyndicationFeed library before so will have to try it out.  Definately looks a lot nicer to use than specifying the namespace and string element name as I have done.

@Laurent The MVVM Light Toolkit looks interesting.  I hope to get a chance to try it too.  Btw, "blendability" is a nice term!!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[947770087]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Toggle Visual States with a Custom Action in Silverlight</title>
        <link>http://jason-mitchell.com/software-development/toggle-visual-states-with-a-custom-action-in-silverlight/</link>
        <pubDate>Wed, 19 May 2010 21:12:07 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/05/19/toggle-visual-states-with-a-custom-action-in-silverlight/</guid>
        <description></description>
        <content:encoded><![CDATA[I was recently working on a project in <a href="http://www.silverlight.net" target="_blank">Silverlight</a> and required the ability to toggle between two states in a UserControl.  When I started working with Silverlight, I would have handled click or mouse events to change the visual state but I soon moved on to work with behaviours and actions so I could remove such code from my code-behind files.  Since an to toggle between two visual states did not exist, this seemed like an ideal opportunity to make my first custom action.

<!--more-->

This is just a quick article and since there is nothing too complex here I have just posted the code here:
<pre lang="csharp">using System.Collections;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interactivity;

namespace IssueTracker.Actions
{
    [DefaultTrigger(typeof(FrameworkElement), typeof(System.Windows.Interactivity.EventTrigger),
                    "MouseLeftButtonUp")]
    public class ToggleStateAction : TargetedTriggerAction
    {
        public static readonly DependencyProperty OffStateProperty;
        public static readonly DependencyProperty OnStateProperty;
        public static readonly DependencyProperty UseTransitionsProperty;

        private bool isOnStateActive;

        static ToggleStateAction()
        {
            OffStateProperty = DependencyProperty.Register("OffState", typeof(string),
                                      typeof(ToggleStateAction), null);
            OnStateProperty = DependencyProperty.Register("OnState", typeof(string),
                                       typeof(ToggleStateAction), null);
            UseTransitionsProperty = DependencyProperty.Register("UseTransitions", typeof(bool),
                                              typeof(ToggleStateAction), null);
        }

        protected override void Invoke(object o)
        {
            Control control = FindTargetElement(Target) as Control;

            if (isOnStateActive)
                VisualStateManager.GoToState(control, OffState, UseTransitions);
            else
                VisualStateManager.GoToState(control, OnState, UseTransitions);

            isOnStateActive = !isOnStateActive;
        }

        private static FrameworkElement FindTargetElement(FrameworkElement element)
        {
            FrameworkElement parent = element;

            while (parent != null)
            {
                IList vsgs = VisualStateManager.GetVisualStateGroups(parent);
                if (vsgs != null &amp;&amp; vsgs.Count &gt; 0)
                {
                    Control control = parent.Parent as Control;
                    if (control != null)
                        return control;
                    return parent;
                }
                parent = parent.Parent as FrameworkElement;
            }

            return null;
        }

        public string OffState
        {
            get { return (string)GetValue(OffStateProperty); }
            set { SetValue(OffStateProperty, value); }
        }

        public string OnState
        {
            get { return (string)GetValue(OnStateProperty); }
            set { SetValue(OnStateProperty, value); }
        }

        public bool UseTransitions
        {
            get { return (bool)GetValue(UseTransitionsProperty); }
            set { SetValue(UseTransitionsProperty, value); }
        }
    }
}</pre>
One of the really nice things when using custom actions is that if you are using Expression Blend, the designer will pick up on your properties and provide you with the ability to edit them without needing to touch the XAML.  It's worth pointing out that I had to add the method "FindTargetElement" to return the control to use in the transition.  In fact, I nabbed this code right out of the source for the GoToState which can be seen at <a title="http://expressionblend.codeplex.com" href="http://expressionblend.codeplex.com">http://expressionblend.codeplex.com</a>.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>155</wp:post_id>
        <wp:post_date>2010-05-19 21:12:07</wp:post_date>
        <wp:post_date_gmt>2010-05-19 21:12:07</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>toggle-visual-states-with-a-custom-action-in-silverlight</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="silverlight-2"><![CDATA[silverlight]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Toggle Visual States with a Custom Action in Silverlight]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/jks519]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=155]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Toggle Visual States with a Custom Action in Silverlight http://bit.ly/jks519]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Quick article showing how to create a basic action to toggle between states in XAML.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[toggle,visual,state,silverlight,expression,blend,custom,action]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Quick article showing how to create a basic action to toggle between visual states in XAML.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[toggle,visual,state,silverlight,expression,blend,custom,action]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Toggle Visual States with a Custom Action in Silverlight]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[78]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[visual states]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1477583033]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1428690424;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:211;}i:1;a:1:{s:2:"id";i:204;}i:2;a:1:{s:2:"id";i:136;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>XNA camera for 2D games</title>
        <link>http://jason-mitchell.com/game-development/xna-camera-for-2d-games/</link>
        <pubDate>Tue, 31 Aug 2010 13:30:00 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/08/31/xna-camera-for-2d-games/</guid>
        <description></description>
        <content:encoded><![CDATA[This is just a quick article to share a nice way to create a camera for 2D games.  There are a couple of ways to do this; I originally did it by making a class that held a position for the camera and then subtracting the object and camera positions when drawing to offset the sprites.  This turned out to be a problem prone approach and caused me a few issues in my Imagine Cup game.

<!--more-->

I recently noticed that it was possible to pass a transform matrix into the spriteBatch.Begin method which allows for a much nicer and more flexible approach to creating a cameras effect for a 2D game.

Below is the code for my Camera class that can be used for 2D games:
<pre lang="csharp">public class Camera
{
    public Camera()
    {
        Position = Vector2.Zero;
        Zoom = 1f;
    }

    public Vector2 Position { get; set; }
    public float Rotation { get; set; }
    public float Zoom { get; set; }

    public Matrix TransformMatrix
    {
        get
        {
            return Matrix.CreateRotationZ(Rotation) * Matrix.CreateScale(Zoom) *
                   Matrix.CreateTranslation(Position.X, Position.Y, 0);
        }
    }
}</pre>
This code is all pretty simple so I’m not going to explain much.  I would just like to highlight that for the rotation, we use the <strong>Matrix.CreateRotationZ</strong> function to create the camera rotation in 2D.

To use this class, all that needs to be done is create a new instance, perform your updates to the position, rotation and zoom then use the TransformMatrix property in the Begin method of your spriteBatch instance like so:
<pre lang="csharp">spriteBatch.Begin(SpriteBlendMode.AlphaBlend, SpriteSortMode.Texture, SaveStateMode.None,
                   camera.TransformMatrix);
spriteBatch.Draw(texture, Vector2.Zero, Color.White);
spriteBatch.End();</pre>
And there it is!  A nice camera solution for 2D games and it should also work for Windows Phone 7!  And here is the <a href="http://www.jason-mitchell.com/Uploads/MatrixTransformCamera.zip" target="_blank">source</a> and XNA 3.1 demo project.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>177</wp:post_id>
        <wp:post_date>2010-08-31 13:30:00</wp:post_date>
        <wp:post_date_gmt>2010-08-31 13:30:00</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-camera-for-2d-games</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="2d-graphics"><![CDATA[2D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA camera for 2D games]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A quick article on how to create a camera for 2D XNA games.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,camera,2D,games]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A quick article on how to create a camera for 2D XNA games.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,camera,2D,games]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA camera for 2D games]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338149]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[84]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[camera]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430653181;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:204;}i:1;a:1:{s:2:"id";i:75;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>19</wp:comment_id>
            <wp:comment_author><![CDATA[H.S.]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-06 11:17:52</wp:comment_date>
            <wp:comment_date_gmt>2011-02-06 10:17:52</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[is there a way to get camera translation to stop once the end of the image is reached? I mean as to not show the blue background. I want to limit camera translation relative to the perimeter of the image.

otherwise great idea thank you very much! the way I was doing it was horrible!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>20</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-06 17:51:31</wp:comment_date>
            <wp:comment_date_gmt>2011-02-06 16:51:31</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[When I first made a 2D camera, I calculated an offset position for every object which was horrible.  This matrix transform approach is much nicer!

Restricting the movement of the camera is definately possible.  The class in the article only defines the basic spatial data for the camera and handles the transformation calculation.  It's upto some other code to update the Position property (or you could modify the class).

If you know the dimensions of your game world and the size of the viewport then you can determine whether or not the camera should be allowed to move.  You could update the camera class to accept an instance of the Rectangle class which represents the world bounds in the constructor.  You could then add a method which is used for updating the camera position which would do the appropriate maths to restrict the movement.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>19</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>21</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-02-06 21:18:24</wp:comment_date>
            <wp:comment_date_gmt>2011-02-06 20:18:24</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[If I get a bit of time I might try update the camera class to do this and then upload a sample project and link to it in this article.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>19</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>22</wp:comment_id>
            <wp:comment_author><![CDATA[Richard]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://none</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-08-24 10:56:32</wp:comment_date>
            <wp:comment_date_gmt>2011-08-24 10:56:32</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[To Expand on the world bounds and restricting camera ill say the following:  (this is in theory, not taking the time to actually test)

in your Game.cs create a class level Rectangle and vars to store width/height
of your world

public class Game1: Micrsoft.Xna.FrameWork.Game
{
   Rectangle worldBoundry;
   int worldWidth;
   int worldHeight;

//Then in your Initialize or LoadContent method of Game1 fill out vars and rectangle information

public void LoadContent()
{
   worldWidth = 1000;
   worldHeight = 1000;
   worldBoundry = new Rectangle(0,0, worldWidth, worldHeight);
}

//Now that you have all that finish now for the method to restrict the cam //pos

public void CamRestrict()
{
  if(cam.Position.X  worldBoundry.width)
     cam.Position.X = worldBoundry.width;
  if(cam.Position.Y  worldBoundry.height)
     cam.Position.Y = worldBoundry.height;

}

// all you got to do is put the method in the Update() method.
// like i said Im not taking time to test but that should work
/. in theory.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314183392.4584";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>23</wp:comment_id>
            <wp:comment_author><![CDATA[Richard]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://none</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-08-24 11:01:52</wp:comment_date>
            <wp:comment_date_gmt>2011-08-24 11:01:52</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[wow ill do the cam restrict again, seems most of my stuff was cut out.

public void CamRestrict()
{
if(cam.Position.X  worldBoundry.Width)
cam.Position.X = worldBoundry.Width;
if(cam.Position.Y  worldBoundry.Height)
cam.Position.Y = worldBoundry.Height)
}

Ingore prev post's method, it got all jacked up
}]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314183712.9225";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>24</wp:comment_id>
            <wp:comment_author><![CDATA[Richard]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://none</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-08-24 11:03:48</wp:comment_date>
            <wp:comment_date_gmt>2011-08-24 11:03:48</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[ok done it again, but you should understand, if cam.x lessthan world bounds x cam x = world bounds x, samething with cam x greaterthan worldbounds width
cam x = worldbounds width.  Do same for cam.Y,]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314183828.6895";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>25</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-08-24 20:36:03</wp:comment_date>
            <wp:comment_date_gmt>2011-08-24 20:36:03</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Richard,

Thanks for your comment(s).  I'm not sure whats up with the WordPress and comments; it looks like it maybe has a length restriction and strips angled brackets to prevent HTML input.

Your example looks like it should basically work (I haven't tried it).  However I'm guessing that it might also show some of the background color defined in the GraphicsDevice.Clear method call.  To prevent this I'd imagine you would need to take account for the games viewport dimensions so that the camera only ever moves to within exactly 1 frame width/height of the boundaries.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314218163.2923";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>2D Particle System for XNA</title>
        <link>http://jason-mitchell.com/game-development/2d-particle-system-for-xna/</link>
        <pubDate>Thu, 11 Nov 2010 14:54:51 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/11/11/2d-particle-system-for-xna/</guid>
        <description></description>
        <content:encoded><![CDATA[Basically since I got into <a href="http://create.msdn.com" target="_blank">XNA</a> (about 3 years ago) I have been tinkering with particle systems for games.  Using a particle system has allows game developers to create really nice, complicated looking effects without too much effort.  Personally I find them pretty mesmerising and often found that with each new effect I create, I could sit back and watch it run for about 10 minutes.

I’ve made quite a few iterations of my particle system but eventually managed to settle on one that I felt had pretty decent performance and was fairly flexible allowing for the creation of a range of effects with the one system.  A couple of months ago I decided to publish this to <a href="http://www.codeplex.com/" target="_blank">CodePlex</a> and can be downloaded <a href="http://microstar.codeplex.com/" target="_blank">here</a>.

<!--more-->

The following video demonstrates some effects I created using my particle system:
<div class="wlWriterEditableSmartContent" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:38721702-f5f0-4c17-9d1a-773dc7245556" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><object width="448" height="336" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="http://www.youtube.com/v/ApLwK2r8Iu4?hl=en&amp;hd=1" /><embed width="448" height="336" type="application/x-shockwave-flash" src="http://www.youtube.com/v/ApLwK2r8Iu4?hl=en&amp;hd=1" /></object></div>
<div style="width: 448px; clear: both; font-size: .8em;">Particle System Demonstration</div>
</div>
&nbsp;

If you are interested in seeing this particle system being used in an actual game, check out the <a href="http://www.youtube.com/watch?v=c3wdQyuyfHc" target="_blank">video</a> of my <a href="http://imaginecup.com/" target="_blank">Imagine Cup</a> 2009 game on YouTube.  In this video, the two different bubble effects at the start were created using this particle system.  It was also used to create the trail behind the player and a slight particle effect in the background which isn’t really visible in the video.

In my system, a particle effect revolves primarily around three main concepts; emitters, forces and modifiers.

An emitter will emit particles in a set pattern at a particular location and also maintain a Queue of free particles for use in effects removing the need to iterate over the entire particle list to find dead particles to re-initialize.  If you have downloaded the code (or browsed the <a href="http://microstar.codeplex.com/SourceControl/changeset/view/58504" target="_blank">source code</a>) you can see that not only have I created a default emitter which initializes particles at a single location, but I have also created emitters which allow me to emit particles in a circle or rectangle pattern.

A force is responsible for the behaviour particles as they are emitted and don’t really need much explanation, a brief look at the code should suffice.  I have defined two forces; Randomize and Directional.  The Randomize force will emit particles at random speeds and directions whilst the Directional force will emit particles at a constant speed along the defined Vector2.

In my opinion, the most interesting aspect of my particle system is the modifiers component.  A modifier is some predefined code that is executed for each and every particle in the effect on every update.  I’m sure there are probably some performance considerations here that I haven’t addressed in the code but I have been able to achieve reasonably high particle counts on my PC with a realistic number of modifiers active.  These modifiers are what make my particle system flexible and allow it to achieve such a range of effects.  Any time I found myself requiring a new behaviour for particles, I programmed a new behaviour.

I don’t want to describe all of the modifiers here since that could take a bit of time, but the following list identifies some of my favourite modifiers:
<ul>
    <li><strong>AlphaAgeTransform</strong> – This will fade a particle in/out based on it’s “age” <em>(Practically all my effects use this)</em></li>
    <li><strong>ColorAgeTransform</strong> – Transitions between two sets of RGB values based on a particles “age”</li>
    <li><strong>DirectionalPull</strong> – Modifies the velocity of the particle to pull it in a certain direction (nice when combined with Randomize force)</li>
    <li><strong>GravityPoint</strong> – Sets a point in 2D space to pull particles towards.  It provides some control by allowing users to define pull strength and area of effect radius</li>
</ul>
At the core of any effect is the Particle and ParticleEffect classes which, for the most part, are pretty boring and the kind of code you would expect.  The XML documentation comments in the code should mostly explain what’s going on in these classes but I want to highlight the ParticleEffect’s ability to save and load effects to and from XML files.  Basically every class (except for Particle) is flagged as Serializable and I have provided a Save and static Load method in the ParticleEffect class.  I created the Save method simply to let me easily create the XML for effects rather than trying to remember the markup myself and I’ve always had the intention to create a particle effect editor tool and remove this method from the code but haven’t found the time to do this yet.

Ideally I would prefer to save the particle effects to a custom file format that contained the image files for particles as well as the XML definition and provide a custom content processor that would initialize the effect.  This would make it easier to share effects between projects as with the current setup, you need to copy the XML definition, the images and then possibly modify the definition to point to a new relative path for the images *yuck*.  Life is full of things I would like to do…

To use the particle effect there are four steps:
<ol>
    <li>Initialize the effect (from file or programmatically)</li>
    <li>Emit particles</li>
    <li>Update effect</li>
    <li>Draw effect</li>
</ol>
The Samples project that is bundled with the source code, demonstrates how to load and display a particle effect and since it’s pretty simple I’m not going to write about that process here.

I’m happy for anyone to take this project and use it for free or tear it apart or whatever people do with things these days.  I would ask that if you do use it that you let me know and send me links to some videos that I can put up to show people what it can do.  Or if you make a particularly cool component that could be added or you want to assist with the project, I would be happy to add you as a developer on the project.
<em><strong>See <a href="http://jason-mitchell.com/game-development/supernova-particle-system-for-monogame/">http://jason-mitchell.com/game-development/supernova-particle-system-for-monogame/</a> for a newer version which has been updated to use MonoGame.</strong></em>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>202</wp:post_id>
        <wp:post_date>2010-11-11 14:54:51</wp:post_date>
        <wp:post_date_gmt>2010-11-11 14:54:51</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>2d-particle-system-for-xna</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="2d-graphics"><![CDATA[2D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/jzMwh1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=202]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: 2D Particle System for XNA http://bit.ly/jzMwh1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,c#,particle,system,xna]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Outline of my 2D Particle System for XNA available for download from CodePlex]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[2D Particle System for XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Outline of my 2D Particle System for XNA available for download from CodePlex]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,c#,particle,system,xna]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[2D Particle System for XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454787322]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[71]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[particle system]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430740421;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:204;}i:1;a:1:{s:2:"id";i:684;}i:2;a:1:{s:2:"id";i:270;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>3D Particle System for XNA</title>
        <link>http://jason-mitchell.com/game-development/3d-particle-system-for-xna/</link>
        <pubDate>Fri, 12 Nov 2010 11:36:33 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/11/12/3d-particle-system-for-xna/</guid>
        <description></description>
        <content:encoded><![CDATA[I’m currently working on a 3D XNA 3.1 (need to use 3.1 for the third party library we are using at the minute) game for a piece of coursework at university and decided I would implement a 3D particle system in order to create some cool explosion effects.  This system is very similar to the particle system I described in my <a href="http://www.jason-mitchell.com/index.php/2010/11/11/2d-particle-system-for-xna/" target="_blank">previous article</a> since I basically lifted a load of code from there.  Since this is simply for a piece of coursework, I didn’t implement the full feature set that can be found in my 2D particle system because:
<ol>
    <li>I wanted to keep it lightweight and not include unnecessary functions</li>
    <li>In the future I want to combine my particle systems together</li>
</ol>
(See end of article for download)

<strong>UPDATE: <em>I’ve added a download to an XNA 4 version of this particle system</em></strong>

<!--more--> For this 3D system, I didn’t implement the concept of <a href="http://www.jason-mitchell.com/index.php/2010/11/11/2d-particle-system-for-xna/" target="_blank">emitters and forces</a> and instead chose to simply implement the default functions for these directly in my particle effect class as these would fit my needs perfectly and also reduce the complexity of the system.  I’m not going to walk through the processes to use this project since it’s virtually identically to the previous article but I just want to highlight the differences between 2D and 3D in drawing the particles.

Naturally in 2D I just used SpriteBatch and it met all my needs, however in 3D I had to create my own quad class called TextureQuad which uses VertexPositionTexture objects as the vertices.  The process of applying a texture to a set of four VertexPositionTexture objects should at least be vaguely familiar to anyone who has started looking at 3D development using <a href="http://create.msdn.com" target="_blank">XNA</a>.  If you aren’t familiar with this, I would recommend taking a look at Riemer Grootjan’s <a href="http://www.riemers.net/eng/Tutorials/XNA/Csharp/Series2/Textures.php" target="_blank">sample</a> to see how this is done.

My basic TextureQuad class looks like:
<pre lang="csharp">using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Particles
{
    public class TextureQuad
    {
        private static readonly Vector2 UpperLeft = new Vector2(0, 0);
        private static readonly Vector2 UpperRight = new Vector2(1, 0);
        private static readonly Vector2 BottomLeft = new Vector2(0, 1);
        private static readonly Vector2 BottomRight = new Vector2(1, 1);

        private readonly VertexBuffer vertexBuffer;
        private readonly VertexDeclaration vertexDeclaration;
        private readonly BasicEffect effect;

        public TextureQuad(GraphicsDevice graphicsDevice, Texture2D texture, int width, int height)
        {
            VertexPositionTexture[] vertices = CreateQuadVertices(width, height);
            vertexBuffer = new VertexBuffer(graphicsDevice, VertexPositionTexture.SizeInBytes * vertices.Length, BufferUsage.WriteOnly);
            vertexBuffer.SetData(vertices, 0, vertices.Length);

            vertexDeclaration = new VertexDeclaration(graphicsDevice, VertexPositionTexture.VertexElements);
            effect = new BasicEffect(graphicsDevice, null) { TextureEnabled = true, Texture = texture};
        }

        private static VertexPositionTexture[] CreateQuadVertices(int width, int height)
        {
            int halfWidth = width / 2;
            int halfHeight = height / 2;

            VertexPositionTexture[] vertices = new VertexPositionTexture[4];

            vertices[0] = new VertexPositionTexture(new Vector3(-halfWidth, halfHeight, 0), UpperLeft);
            vertices[1] = new VertexPositionTexture(new Vector3(halfWidth, halfHeight, 0), UpperRight);
            vertices[2] = new VertexPositionTexture(new Vector3(-halfWidth, -halfHeight, 0), BottomLeft);
            vertices[3] = new VertexPositionTexture(new Vector3(halfWidth, -halfHeight, 0), BottomRight);

            return vertices;
        }

        public void Draw(GraphicsDevice graphicsDevice, Matrix viewMatrix, Matrix projectionMatrix, Matrix worldMatrix)
        {
            graphicsDevice.VertexDeclaration = vertexDeclaration;

            effect.World = worldMatrix;
            effect.Projection = projectionMatrix;
            effect.View = viewMatrix;

            effect.Begin();
            foreach (EffectPass pass in effect.CurrentTechnique.Passes)
            {
                pass.Begin();
                graphicsDevice.Vertices[0].SetSource(vertexBuffer, 0, VertexPositionTexture.SizeInBytes);
                graphicsDevice.DrawPrimitives(PrimitiveType.TriangleStrip, 0, 2);
                pass.End();
            }
            effect.End();
        }

        public float Alpha
        {
            get { return effect.Alpha; }
            set { effect.Alpha = value; }
        }
    }
}</pre>
It’s not hugely complicated and is essentially just an reusable approach to the sample I linked to on Riemer Grootjan’s site.  One issue I encountered using this approach is best described using an image so here it is:

<img style="display: block; float: none; margin-left: auto; margin-right: auto;" alt="" src="http://www.jason-mitchell.com/images/particles.jpg" width="454" height="338" />

This really bugged me for a bit since there’s no use in using transparent textures if we will always see what would appear to be the quad the texture is applied to.  Thankfully, <a href="http://www.twitter.com/bobthecbuilder" target="_blank">@BobTheCBuilder</a> was able to point out that this was simply because the particles are unordered and advised me to set the DepthBufferWriteEnable property on the graphics device render state to false to solve the issue.  And it did:

<img style="display: block; float: none; margin-left: auto; margin-right: auto;" alt="" src="http://www.jason-mitchell.com/images/particlesWorking.png" width="462" height="346" />

As promised, here’s the download link: <a href="http://www.jason-mitchell.com/uploads/particles.zip">http://www.jason-mitchell.com/uploads/particles.zip</a>

<strong>XNA 4 Download: </strong><a href="http://www.jason-mitchell.com/uploads/particles_xna4.zip" target="_blank">http://www.jason-mitchell.com/uploads/particles_xna4.zip</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>204</wp:post_id>
        <wp:post_date>2010-11-12 11:36:33</wp:post_date>
        <wp:post_date_gmt>2010-11-12 11:36:33</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>3d-particle-system-for-xna</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="3d-graphics"><![CDATA[3D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[I’m currently working on a 3D XNA game for a piece of coursework at university and decided I would implement a 3D particle system.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[3D,xna,particle,system,particles]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[3D Particle System for XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: 3D Particle System for XNA http://bit.ly/llKo6f]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=204]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/llKo6f]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[I’m currently working on a 3D XNA game for a piece of coursework at university and decided I would implement a 3D particle system.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[3D,xna,particle,system,particles]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[3D Particle System for XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338185]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[82]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[particle system]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430651579;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:202;}i:1;a:1:{s:2:"id";i:684;}i:2;a:1:{s:2:"id";i:270;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>26</wp:comment_id>
            <wp:comment_author><![CDATA[programmer]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-11-28 22:54:19</wp:comment_date>
            <wp:comment_date_gmt>2010-11-28 21:54:19</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[hi there,

I've been trying this piece of code in VS 2010 in XNA 4 and then you have too change a bit more, but then you get it rendered ike bfore bob the c-builder so the particles are still unordened...has anyone had this probleem yet?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>27</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-11-29 14:54:31</wp:comment_date>
            <wp:comment_date_gmt>2010-11-29 13:54:31</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[At the time I was doing this, I first went to the App Hub forums and asked about this problem.  Someone suggested a fix for XNA 4 which was to turn off premultiplied alpha on your particle textures.  I haven't tried this but it might help you.

Take a look at http://forums.create.msdn.com/forums/p/65744/402279.aspx
Hope this helps]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>28</wp:comment_id>
            <wp:comment_author><![CDATA[programmer]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-12-09 23:33:21</wp:comment_date>
            <wp:comment_date_gmt>2010-12-09 22:33:21</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[after the adjustments you've pointed it looks better, but stil not quite like the picture above...will look at it better later, but thanks anyway]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>29</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2010-12-21 20:37:38</wp:comment_date>
            <wp:comment_date_gmt>2010-12-21 19:37:38</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I recently updated my project to XNA 4 and had to change the GraphicsDevice settings a bit because of API changes between version 3.1 and 4.

I set change the following before rendering the effects:

graphicsDevice.BlendState = BlendState.Additive;
graphicsDevice.DepthStencilState = DepthStencilState.None;

And after the rendering of the particle effects is done:

graphicsDevice.BlendState = BlendState.Opaque;
graphicsDevice.DepthStencilState = DepthStencilState.Default;

This image shows what my effect looks like using those settings. http://www.jason-mitchell.com/images/particles_xna4.png

If I get a chance I will update the sample project to XNA 4.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>30</wp:comment_id>
            <wp:comment_author><![CDATA[Erez Robinson]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-02-20 15:14:29</wp:comment_date>
            <wp:comment_date_gmt>2012-02-20 15:14:29</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Your TextureQuad instantiation is very slow.
So you need to create them before you create your particles.

You can put them in a list:
List quads = new List();

            foreach (var texture in textures)
            {
                var quad  = new TextureQuad(graphicsDevice, texture, texture.Width, texture.Height);
                quads.Add(quad);
            }

and then send them to the particle as an actual parameter, like so:
particles[i] = new Particle(particleLifespan, graphicsDevice, quads[random.Next(quads.Count)]);

Nice example though.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329750869.8774";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>87</wp:comment_id>
            <wp:comment_author><![CDATA[Nilemann]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-02-13 20:23:02</wp:comment_date>
            <wp:comment_date_gmt>2013-02-13 20:23:02</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hey Jason,
I agree with Erez Robinson. The initialization is very slow and the program takes a lot of memory. Of course for a demo this is no prob, but for the sake of speed I would suggest to put only one textured quad instance into the ParticleEffect and then update its position and alpha value in the draw method for every particle.

But independent of that, thank you for the nice sample!! That was exactly was I was looking for!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360786982.962764;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360918029.683388;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Working with Isolated Storage in Silverlight</title>
        <link>http://jason-mitchell.com/mobile-dev/working-with-isolated-storage-in-silverlight/</link>
        <pubDate>Sat, 13 Nov 2010 15:59:35 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/11/13/working-with-isolated-storage-in-silverlight/</guid>
        <description></description>
        <content:encoded><![CDATA[When using <a href="http://www.silverlight.net/" target="_blank">Silverlight</a>, developers have no direct access to the file system on a user’s computer.  However Silverlight does use <a href="http://www.silverlight.net/learn/quickstarts/isolatedstorage/http://www.silverlight.net/learn/quickstarts/isolatedstorage/" target="_blank">isolated storage</a> as a virtual file system to store data on machines providing the application has the correct file permissions to do so.  Additionally, Windows Phone 7 uses isolated storage for saving data to the phone which prevents applications interfering with each others data.

Since the Windows Phone 7 developer tools were released, I have playing around with developing little apps for the phone to get to grips with the basics of app development for the platform.  When I got around to playing with isolated storage on the phone, I quickly got tired of writing the same code over and over again (I like to try and keep my code <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank">DRY</a>).  For this reason, I decided to create a short helper class which uses delegates to help reduce the amount of repeated code I was writing.

<!--more-->

<strong>IsolatedStorageHelper</strong>
<pre lang="csharp" escaped="true">public static class IsolatedStorageHelper
{
    public static object FileOperation(string fileName, FileMode fileMode, FileAccess fileAccess, Func&lt;Stream, object&gt; fileOperation)
    {
        using (IsolatedStorageFile userStore = IsolatedStorageFile.GetUserStoreForApplication())
        {
            using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream(fileName, fileMode, fileAccess, userStore))
            {
                return fileOperation(stream);
            }
        }
    }

    public static void FileOperation(string fileName, FileMode fileMode, FileAccess fileAccess, Action&lt;Stream&gt; fileOperation)
    {
        FileOperation(fileName, fileMode, fileAccess, stream =&gt;
                                                            {
                                                                fileOperation(stream);
                                                                return null;
                                                            });
    }
}</pre>
Using this class is pretty simple.  I use it frequently in my test Windows Phone 7 applications to load and save XML.  Here’s an example:
<pre lang="csharp" escaped="true">xDoc = IsolatedStorageHelper.FileOperation("myFile.xml", FileMode.Open, FileAccess.Read, stream =&gt; XDocument.Load(stream)) as XDocument;</pre>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>211</wp:post_id>
        <wp:post_date>2010-11-13 15:59:35</wp:post_date>
        <wp:post_date_gmt>2010-11-13 15:59:35</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>working-with-isolated-storage-in-silverlight</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="data-access"><![CDATA[data access]]></category>
        <category domain="post_tag" nicename="isolated-storage"><![CDATA[Isolated Storage]]></category>
        <category domain="category" nicename="mobile-dev"><![CDATA[Mobile Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="silverlight-2"><![CDATA[silverlight]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Working with Isolated Storage in Silverlight]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[My basic helper class for working with isolated storage using Silverlight for the browser and Windows Phone 7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[isolate,storage,silverlight,windows,phone,wp7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Working with Isolated Storage in Silverlight http://bit.ly/jjDlKH]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=211]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/jjDlKH]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[My basic helper class for working with isolated storage using Silverlight for the browser and Windows Phone 7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[isolate,storage,silverlight,windows,phone,wp7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Working with Isolated Storage in Silverlight]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[isolated storage]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1461407630]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429762238;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:136;}i:1;a:1:{s:2:"id";i:89;}i:2;a:1:{s:2:"id";i:155;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Windows Phone 7 Presentation Slides and XNA Demo</title>
        <link>http://jason-mitchell.com/university/windows-phone-7-slide-and-xna-demo/</link>
        <pubDate>Sat, 20 Nov 2010 23:05:31 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/11/20/windows-phone-7-slide-and-xna-demo/</guid>
        <description></description>
        <content:encoded><![CDATA[I have uploaded the slides and <a href="http://create.msdn.com" target="_blank">XNA</a> demo project from my Windows Phone 7 presentation I gave at my University on Wednesday.  You can download them <a href="http://www.jason-mitchell.com/Uploads/WP7Presentation.zip" target="_blank">here</a>.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>215</wp:post_id>
        <wp:post_date>2010-11-20 23:05:31</wp:post_date>
        <wp:post_date_gmt>2010-11-20 23:05:31</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>windows-phone-7-slide-and-xna-demo</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="talks"><![CDATA[talks]]></category>
        <category domain="category" nicename="university"><![CDATA[University]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Windows Phone 7 Presentation Slides and XNA Demo http://bit.ly/keRVb2]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=215]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/keRVb2]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[57]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[windows phone]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Windows Phone 7 presentation slides and XNA demo]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1468791055]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429799721;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:177;}i:1;a:1:{s:2:"id";i:285;}i:2;a:1:{s:2:"id";i:564;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Duplex WCF Services Over HTTP</title>
        <link>http://jason-mitchell.com/software-development/duplex-wcf-services-over-http/</link>
        <pubDate>Tue, 30 Nov 2010 13:11:51 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2010/11/30/duplex-wcf-services-over-http/</guid>
        <description></description>
        <content:encoded><![CDATA[I have recently been spending a lot of time working with <a href="http://msdn.microsoft.com/en-us/netframework/aa663324.aspx" target="_blank">WCF</a> for my final year project which requires frequent and efficient communication between different types of devices including smartphones.  My initial approach was to occasionally and asynchronously poll the services to see if there was any new data available.  The problem with this is immediately obvious – constantly polling the server will impact the overall performance and will also drain the battery of any smartphone utilising the services so I began looking into duplex WCF services over HTTP.  I found it to be pretty easy to dig up some useful information on the subject and I must give credit to <a href="http://realfiction.net/" target="_blank">Frank Quednau</a> for his “<a href="http://realfiction.net/go/113" target="_blank">no frills, bare-bones example to Duplex WCF</a>” article which served as the foundation to my own work.

<!--more-->

The service and callback interface of my code deviates very little from Franks’ so I’m not going to discuss those parts again.  How my code does differ is the use of HTTP in place of TCP, how the service is hosted and how it is consumed.  See the end of the article for a Visual Studio 2010 download of my project.

Essentially, I was looking to host my service in IIS and consume it via the proxy class which is generated when you add a new service reference to a project.  I created a basic service that would use a callback interface to send data back to the client.  As far as I was concerned, I was good to go, so I built the project and tried to add the service reference to my client project only to be faced with the following error when trying to download the service metadata:
<blockquote><em>C<strong>ontract requires Duplex, but Binding ‘BasicHttpBinding’ doesn’t support it or isn’t configured properly to support it.</strong></em>

&nbsp;</blockquote>
The solution to this problem was to configure my service to use wsDualHttpBinding instead of basicHttpBinding.  To do this, I added the following configuration to my WCF application’s web.config file:

&lt;services&gt;
&lt;service name="Framework.Networking.Services.ServiceWithCallback"&gt;
&lt;endpoint address="ServiceWithCallback" binding="wsDualHttpBinding" contract="Framework.Networking.Services.IServiceWithCallback" /&gt;
&lt;host&gt;
&lt;baseAddresses&gt;
&lt;add baseAddress="<a href="http://localhost:1688&quot;/">http://localhost:1688"/</a>&gt;
&lt;/baseAddresses&gt;
&lt;/host&gt;
&lt;/service&gt;
&lt;/services&gt;

The important bit here is the binding attribute in the endpoint element for my service.  Presumably if no configuration exists for a service then WCF will use some default settings which setup a service using basicHttpBinding.  With this configuration in place I could now add my service reference and have my proxy classes generated for me.

In order to prevent any port conflicts, I edited the binding for the service in the app.config file in my client application to set the clientBaseAddress attribute to http://localhost:1689".  Note the different port number to the service configuration.  This is the address that the application will use to create the required callback channel.

To consume this service I created a class which implements the service’s callback interface (or implement it on the class calling the service) and created a new InstanceContext object to give to the proxy class when instantiating it.

Implementing the callback interface threw me a bit because I couldn’t use my interface defined in the services project (called IDataOutputCallback).  I tried to add a reference in my client project to my services project and used the interface from there and got the following exception when you try to consume the service:
<blockquote><strong><em>The InstanceContext provided to the ChannelFactory contains a UserObject that does not implement the CallbackContractType 'ConsoleApplication1.ServiceReference1.IServiceWithCallbackCallback'.</em></strong></blockquote>
This showed that by adding a new service reference, we not only get a proxy class generated but also a new callback interface with a different name to the original one.  This new name is of the format “&lt;ServiceContractName&gt;Callback” hence the confusing generated interface name in my exception above.

The biggest benefit I have found in using duplex WCF services is that it allows for a publish-subscribe approach to exchanging data between devices.  When an application starts up it could call a service method called Subscribe and supply some form of identifier to associate it’s callback channel in a dictionary.  Then clients could communicate via a service method called Publish which would iterate the callbacks stored in the dictionary and send the message through each of them.

<strong>Download:</strong> <a title="http://www.jason-mitchell.com/Uploads/WCFDuplexHTTP.zip" href="http://www.jason-mitchell.com/Uploads/WCFDuplexHTTP.zip">http://www.jason-mitchell.com/Uploads/WCFDuplexHTTP.zip</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>220</wp:post_id>
        <wp:post_date>2010-11-30 13:11:51</wp:post_date>
        <wp:post_date_gmt>2010-11-30 13:11:51</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>duplex-wcf-services-over-http</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <category domain="post_tag" nicename="wcf-2"><![CDATA[wcf]]></category>
        <category domain="post_tag" nicename="web-services"><![CDATA[web services]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[duplex,wcf,sevice,http,wsDualHttpBinding,basicHttpBinding]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Implementing and consuming duplex WCF services over HTTP with sample code.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Duplex WCF Services Over HTTP]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Implementing and consuming duplex WCF services over HTTP with sample code.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[duplex,wcf,sevice,http,wsDualHttpBinding,basicHttpBinding]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Duplex WCF Services Over HTTP]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338267]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[76]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[wcf]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430755056;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:378;}i:1;a:1:{s:2:"id";i:260;}i:2;a:1:{s:2:"id";i:555;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>31</wp:comment_id>
            <wp:comment_author><![CDATA[David L.]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-09-18 08:38:14</wp:comment_date>
            <wp:comment_date_gmt>2011-09-18 08:38:14</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you very much. The error of the UserObject makes me fool!

The point is to use the interface generated from the proxy client and not the original interface of the service!

No manuals say this important thing.

Thank you very much.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316335094.4903";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>32</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-09-18 10:02:19</wp:comment_date>
            <wp:comment_date_gmt>2011-09-18 10:02:19</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Glad it helped.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1316340139.468";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>62</wp:comment_id>
            <wp:comment_author><![CDATA[Steve Asher]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-07-12 09:21:31</wp:comment_date>
            <wp:comment_date_gmt>2012-07-12 09:21:31</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks Jason - I was scratching my head about that error until I found your blog post.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342084891.5335";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342113235.9604";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>91</wp:comment_id>
            <wp:comment_author><![CDATA[Orxan]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-05 11:14:52</wp:comment_date>
            <wp:comment_date_gmt>2013-03-05 11:14:52</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you very much.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1362482092.3567779;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1362518431.393661;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>170</wp:comment_id>
            <wp:comment_author><![CDATA[Jayesh Tanna]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-07-03 06:36:00</wp:comment_date>
            <wp:comment_date_gmt>2013-07-03 06:36:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi,

Thank you very much

but now If I want to access (start/stop) consoleapplication1  from my web application? so is it possible using WCF or any other way?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[950164874]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>171</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-07-03 07:52:00</wp:comment_date>
            <wp:comment_date_gmt>2013-07-03 07:52:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[If your web application has sufficient permissions on the server then it should be able to start the .exe file in a thread which you could then use to stop the exe when required.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>170</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[950164874]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[950235835]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Generic Pool Class for Reusing Objects</title>
        <link>http://jason-mitchell.com/game-development/generic-pool-class-for-reusing-objects/</link>
        <pubDate>Tue, 25 Jan 2011 19:29:48 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2011/01/25/generic-pool-class-for-reusing-objects/</guid>
        <description></description>
        <content:encoded><![CDATA[When I am working with <a href="http://create.msdn.com" target="_blank">XNA</a>, I frequently found myself writing the same code in order to maintain lists of objects in memory and track free items that can be reinitialized to reduce garbage collection.  Eventually I had enough of doing this and decided to implement a generic Pool class in C# that would take care of this for me.

<!--more-->

<strong>Source for Pool class:</strong>
<pre lang="csharp" escaped="true">public class Pool&lt;T&gt;
{
    private readonly List&lt;T&gt; items = new List&lt;T&gt;();
    private readonly Queue&lt;T&gt; freeItems = new Queue&lt;T&gt;();

    private readonly Func&lt;T&gt; createItemAction;

    public Pool(Func&lt;T&gt; createItemAction)
    {
        this.createItemAction = createItemAction;
    }

    public void FlagFreeItem(T item)
    {
        freeItems.Enqueue(item);
    }

    public T GetFreeItem()
    {
        if (freeItems.Count == 0)
        {
            T item = createItemAction();
            items.Add(item);

            return item;
        }

        return freeItems.Dequeue();
    }

    public List&lt;T&gt; Items
    {
        get { return items; }
    }

    public void Clear()
    {
        items.Clear();
        freeItems.Clear();
    }
}</pre>
What this class is doing is maintaining all of the items in memory in a List and tracking all of the free items in a Queue.  When a new Pool is being created, a delegate is passed to the constructor which is then used to create a new item in the pool if no free items are available.

The code here is fairly simple; call GetFreeItem() to get a free item in the pool and call FlagFreeItem(objectInstance) to return an object to the free items queue.

And lastly, an example of how to use this code:
<pre lang="csharp" escaped="true">private Pool&lt;GameObject&gt; objectPool = new Pool&lt;GameObject&gt;(() =&gt; new GameObject());

public void Initialize()
{
    GameObject gameObject = objectPool.GetFreeItem();
    gameObject.Initialize();
}</pre>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>227</wp:post_id>
        <wp:post_date>2011-01-25 19:29:48</wp:post_date>
        <wp:post_date_gmt>2011-01-25 19:29:48</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>generic-pool-class-for-reusing-objects</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="data-structures"><![CDATA[data structures]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.jason-mitchell.com/index.php/2011/01/25/generic-pool-class-for-reusing-objects/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/eOpH7A]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A basic C# generic Pool class for maintaining objects in memory and tracking available free items]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=227]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Generic Pool Class for Reusing Objects]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Generic Pool Class for Reusing Objects http://bit.ly/eOpH7A]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Generic Pool Class for Reusing Objects http://bit.ly/lzTddx]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/lzTddx]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,c#,pool]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A basic C# generic Pool class for maintaining objects in memory and tracking available free items]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,c#,pool]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Generic Pool Class for Reusing Objects]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338229]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[79]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[generic pool]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430472009;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:304;}i:1;a:1:{s:2:"id";i:204;}i:2;a:1:{s:2:"id";i:155;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>73</wp:comment_id>
            <wp:comment_author><![CDATA[Guillermo]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-12-05 20:13:43</wp:comment_date>
            <wp:comment_date_gmt>2012-12-05 20:13:43</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks, very usefull]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354738423.8276";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354822932.9306";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>275</wp:comment_id>
            <wp:comment_author><![CDATA[peacelover]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-06-22 08:48:00</wp:comment_date>
            <wp:comment_date_gmt>2014-06-22 08:48:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Actually I was writing a post regarding object pooling. I have found your article best on the internet so I will mention this to my site]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1448504549]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Using the Bing Maps Silverlight Control</title>
        <link>http://jason-mitchell.com/software-development/using-the-bing-maps-silverlight-control/</link>
        <pubDate>Sat, 12 Mar 2011 21:49:21 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/?p=260</guid>
        <description></description>
        <content:encoded><![CDATA[This week I played around with the Bing Maps <a href="http://www.silverlight.net/" target="_blank">Silverlight</a> Control to find out how easy it would be to get a map up and running in an application, place pins on said map and get the name of the country that the user has clicked on.  I soon discovered that achieving this functionality was incredibly easy!

The simple application I created can be found at <a href="http://jason-mitchell.com/uploads/bingmaps/bingmapstestpage.html">http://jason-mitchell.com/uploads/bingmaps/bingmapstestpage.html</a>

<!--more-->

Naturally the first thing that needed to be done was to download and install the Bing Maps Silverlight Control from <a href="http://www.microsoft.com/downloads/en/details.aspx?displaylang=en&amp;FamilyID=beb29d27-6f0c-494f-b028-1e0e3187e830" target="_blank">here</a>.  I also needed to create a Bing Maps Key; see how to do this on <a href="http://msdn.microsoft.com/en-us/library/ff428642.aspx" target="_blank">MSDN</a>.  During the brief time I spent searching for information on this topic I also came across an “Interactive SDK” provided by Microsoft.  This turned out to be very useful in figuring out how to work the map control and you can find it at <a href="http://www.microsoft.com/maps/isdk/silverlight/">http://www.microsoft.com/maps/isdk/silverlight/</a>.

Once this was done I created a new Silverlight application project in Visual Studio 2010 and added the reference to Microsoft.Maps.MapControl.dll that I had just installed.  In my MainPage.xaml markup I added a new namespace inside the UserControl tag by adding:
<pre lang="csharp">xmlns:bing="clr-namespace:Microsoft.Maps.MapControl;assembly=Microsoft.Maps.MapControl</pre>
I’m not going to provide a full code listing in this article so if you aren’t sure on how to do this then check out the zip file at the end of this article.

My next step was to add the markup to display the map control in my LayoutRoot.  I was pleasantly surprised when this was just a simple one line tag as shown below:
<pre lang="csharp" escaped="true">&lt;bing:Map x:Name="MapControl" CredentialsProvider="your Bing maps key" /&gt;</pre>
In order to create the functionality in my demo application I added a handler for the Map’s MouseClick event.  This handler will call one of two methods based on what radio button has been checked.  Again I’m not putting the code in the article but it is in the download.

In order to place a push pin it took <strong>three lines of code</strong> without mushing it all together and not counting the method signature.  See it below:
<pre lang="csharp" escaped="true">private void PlacePinOnMap(MapMouseEventArgs e)
{
    Location worldCoords = MapControl.ViewportPointToLocation(e.ViewportPoint);
    Pushpin pushpin = new Pushpin {Location = worldCoords};

    MapControl.Children.Add(pushpin);
}</pre>
There’s nothing complicated here.  MapMouseEventArgs.ViewportPoint returns the click location on the screen which can then be passed to the MapControl.ViewportPointToLocation method which will convert the click location to a <strong>geocode </strong>(longitude and latitude) representing the location on the map.   Next I create a new Pushpin control, give it the geocode and add it to the map.  Pretty easy!

In order to get the location information such as street and country we have to <strong>use Microsoft’s Geocode web service</strong>.  The address for this is :

<a title="http://dev.virtualearth.net/webservices/v1/GeocodeService/GeocodeService.svc" href="http://dev.virtualearth.net/webservices/v1/GeocodeService/GeocodeService.svc">http://dev.virtualearth.net/webservices/v1/GeocodeService/GeocodeService.svc</a>

I added a new Service Reference to my Silverlight application which pointed to this service.  This will generate a proxy class called <strong>GeocodeServiceClient</strong> which provides a <strong>ReverseGeocodeAsync method</strong> which will convert a geocode into a real address.  The proxy class also provides a GeocodeAsync method which presumably converts an address to a geocode (I haven’t tried it).  The code below shows how to get the name of the country that has been clicked on using this web service.
<pre lang="csharp" escaped="true">private void GetCountryFromClickLocation(MapMouseEventArgs e)
{
    Location worldCoords = MapControl.ViewportPointToLocation(e.ViewportPoint);

    GeocodeServiceClient geocodeClient = new GeocodeServiceClient("BasicHttpBinding_IGeocodeService");
    geocodeClient.ReverseGeocodeCompleted += ReverseGeocodeCompleted;

    ReverseGeocodeRequest request = new ReverseGeocodeRequest();
    request.Culture = MapControl.Culture;
    request.Location = worldCoords;
    request.ExecutionOptions = new ExecutionOptions();
    request.ExecutionOptions.SuppressFaults = true;

    MapControl.CredentialsProvider.GetCredentials(credentials =&gt;
               {
                  request.Credentials = credentials;
                  geocodeClient.ReverseGeocodeAsync(request);
               });
}

private void ReverseGeocodeCompleted(object sender, ReverseGeocodeCompletedEventArgs e)
{
    ResultTextBlock.Text = "Country: " + e.Result.Results[0].Address.CountryRegion;
}</pre>
Again we have to convert our click location into a geocode to give to the web service.  This code is pretty straightforward so I’m not going to go through it.

That’s basically it!  Overall I’m very impressed with Microsoft’s Bing Maps support in Silverlight both in terms of the SDK and the documentation available online.  The demo application took no time at all to whip up after a few minutes spent researching.

<strong><em>Demo Project Download:</em></strong> <a href="http://www.jason-mitchell.com/Uploads/BingMapsDemo-12_03_11.zip" target="_blank">http://www.jason-mitchell.com/Uploads/BingMapsDemo-12_03_11.zip</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>260</wp:post_id>
        <wp:post_date>2011-03-12 21:49:21</wp:post_date>
        <wp:post_date_gmt>2011-03-12 21:49:21</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>using-the-bing-maps-silverlight-control</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="bing"><![CDATA[bing]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="silverlight-2"><![CDATA[silverlight]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[How to use the Bing Maps Silverlight Control to place push pins on a map and get the country name from a click location]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Jason Mitchell: Using the Bing Maps Silverlight Control]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/e4iz87]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.jason-mitchell.com/index.php/2011/03/12/using-the-bing-maps-silverlight-control/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/mEYxNV]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=260]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Using the Bing Maps Silverlight Control http://bit.ly/mEYxNV]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[bing,silverlight,maps,control,pushpin,country]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[How to use the Bing Maps Silverlight Control to place push pins on a map and get the country name from a click location]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[bing,silverlight,maps,control,pushpin,country]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Jason Mitchell: Using the Bing Maps Silverlight Control]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338238]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[bing maps]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430548197;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:136;}i:1;a:1:{s:2:"id";i:89;}i:2;a:1:{s:2:"id";i:155;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>33</wp:comment_id>
            <wp:comment_author><![CDATA[Kike]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-03-15 04:45:57</wp:comment_date>
            <wp:comment_date_gmt>2011-03-15 03:45:57</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hey, nice job!
If i wanted to get the city what can i do i already tried with e.Result.Results[0].Address.District;
but does not work
Thnx!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>34</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-03-15 21:43:54</wp:comment_date>
            <wp:comment_date_gmt>2011-03-15 20:43:54</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks a lot!

If you use e.Result.Results[0].Address.Locality you will get the town/city name.

Check out http://msdn.microsoft.com/en-us/library/cc966788.aspx]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>35</wp:comment_id>
            <wp:comment_author><![CDATA[Akhila]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-21 13:25:44</wp:comment_date>
            <wp:comment_date_gmt>2011-11-21 13:25:44</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[@Kike,

 e.Result.Results[0].Address.Locality works perfect for city name..

Thanks Jason.. very nice article.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321881944.3794";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Imagine Cup Team into Irish Finals</title>
        <link>http://jason-mitchell.com/university/imagine-cup-team-into-irish-finals/</link>
        <pubDate>Sat, 12 Mar 2011 22:10:57 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/?p=268</guid>
        <description></description>
        <content:encoded><![CDATA[This year I’m mentoring a team at my university in the <a href="http://imaginecup.com/" target="_blank">Imagine Cup</a>; I don’t have the time to actually compete so this is a great way for me to stay involved with it.  On 04/03/2011 we received an email from Microsoft Ireland informing us that the team got through to the Irish Finals to compete for the opportunity to represent Ireland in the global competition.

This was great news and I’m really excited for the team to have the opportunity to experience this as it’s a great chance for them to learn loads and develop new skills in the technologies they are using to develop their application.  There’s a lot of work to be done but I’m sure they can manage it!  Best of luck to them at the Irish Finals!]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>268</wp:post_id>
        <wp:post_date>2011-03-12 22:10:57</wp:post_date>
        <wp:post_date_gmt>2011-03-12 22:10:57</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>imagine-cup-team-into-irish-finals</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="imagine-cup"><![CDATA[Imagine Cup]]></category>
        <category domain="category" nicename="university"><![CDATA[University]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[62]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[imagine cup]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[This year I’m mentoring a team at my university in the Imagine Cup; I don’t have the time to actually compete so this is a great way for me to stay involved with iit.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1502078207]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1428381746;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:294;}i:1;a:1:{s:2:"id";i:584;}i:2;a:1:{s:2:"id";i:202;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Setting Alpha Value for SpriteBatch.Draw in XNA 4</title>
        <link>http://jason-mitchell.com/game-development/setting-alpha-value-for-spritebatch-draw-in-xna-4/</link>
        <pubDate>Sun, 13 Mar 2011 13:45:00 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2011/03/13/setting-alpha-value-for-spritebatch-draw-in-xna-4/</guid>
        <description></description>
        <content:encoded><![CDATA[A few weeks ago I spent some time upgrading my <a href="http://microstar.codeplex.com/" target="_blank">MicroStar Particle System</a> from <a href="http://create.msdn.com" target="_blank">XNA</a> 3.1 to XNA 4.  For the most part this process went smoothly; there were quite a few changes to be made all over the place.  However once I had cleared up all the build errors and ran the sample project I saw that my code for fading out particles when drawing them via my SpriteBatch instance was obviously not working.

<!--more-->

I immediately set about trying to hunt down the offending piece of code but came up blank; there was nothing that I had changed that should have killed that functionality.  After spending some time rummaging through the source code I felt sure that it was caused by some breaking change in XNA between versions 3.1 and 4.0.  As it turns out, this assumption was correct.

In XNA 3.1 all that was needed to be done to fade a texture out in a SpriteBatch draw call was to enable alpha blending (now enabled by default in XNA 4.0) and set the “A” property of your Color object appropriately like so:
<pre lang="csharp">Color myColor = Color.White;
myColor.A = 50;
spriteBatch.Draw(texture, position, sourceRect, myColor, ...... );</pre>
Now it seems that changing the alpha value on a Color instance to be used with SpriteBatch doesn’t make a difference.  What we now must do in XNA 4.0 is to define the alpha separately to the colour as a float with a value between 0 and 1.  Then the selected colour must then be multiplied by this float to set the transparency:
<pre lang="csharp">spriteBatch.Draw(texture, position, sourceRect, Color.White * 0.5f, .......);</pre>
This line of code will draw the texture at half transparency.

At first I found this really confusing and I longed for the old approach from XNA 3.1 but over time I’ve come to prefer the new XNA 4.0 approach that requires me to define my alpha separately to the colour.  This also neatly resolves some conflicts between colour modifiers in my particle system (they could have been resolved anyway but it wouldn’t have been as nice).]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>270</wp:post_id>
        <wp:post_date>2011-03-13 13:45:00</wp:post_date>
        <wp:post_date_gmt>2011-03-13 13:45:00</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>setting-alpha-value-for-spritebatch-draw-in-xna-4</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="2d-graphics"><![CDATA[2D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.jason-mitchell.com/index.php/2011/03/13/setting-alpha-value-for-spritebatch-draw-in-xna-4/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/gD0iMr]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/lMrH8X]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Setting Alpha Value for SpriteBatch.Draw in XNA 4]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A brief outline of the changes in rendering textures between XNA 3.1 and XNA 4.0 in order to set the transparency of the color.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,4.0,4,spritebatch,alpha,transparency,color]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Setting Alpha Value for SpriteBatch.Draw in XNA 4 http://bit.ly/lMrH8X]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=270]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A brief outline of the changes in rendering textures between XNA 3.1 and XNA 4.0 in order to set the transparency of the color.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,4.0,4,spritebatch,alpha,transparency,color]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Setting Alpha Value for SpriteBatch.Draw in XNA 4]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338320]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[78]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[alpha]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430711806;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:204;}i:1;a:1:{s:2:"id";i:99;}i:2;a:1:{s:2:"id";i:177;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>36</wp:comment_id>
            <wp:comment_author><![CDATA[Ned]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-04-06 14:52:35</wp:comment_date>
            <wp:comment_date_gmt>2011-04-06 13:52:35</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Ahhhh, that's what changed. I was wondering why I was having such wonky problems. I like this. Seems much cleaner somehow.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>37</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-04-06 17:00:56</wp:comment_date>
            <wp:comment_date_gmt>2011-04-06 16:00:56</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Yeah I like it better this way now.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>38</wp:comment_id>
            <wp:comment_author><![CDATA[Mika]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-05-06 11:04:08</wp:comment_date>
            <wp:comment_date_gmt>2011-05-06 11:04:08</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Color alpha channel is the obvious and most convenient place for storing the opaqueness factor. This new approach wastes the Color.A field, requires storing the alpha separately and breaks a lot of existing code.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304679848.3965";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304680828.5226";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>39</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-05-06 11:38:57</wp:comment_date>
            <wp:comment_date_gmt>2011-05-06 11:38:57</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I agree that the alpha property of the Color object is the most obvious place for it and it most certainly breaks a lot of code.

I'm not sure that I would agree that Color.A field is wasted though.  It still has its uses; for example in per pixel collision detection if you want to check that a pixel isn't transparent I would assume that the alpha value would be set here.  Similarly for something like a multi-textured terrain shader your code might make use of all 4 colour channels.

It's important to remember that Color is not used just for rendering sprites.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304681937.2625";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>40</wp:comment_id>
            <wp:comment_author><![CDATA[matt]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-07-20 05:40:39</wp:comment_date>
            <wp:comment_date_gmt>2011-07-20 05:40:39</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you for this post, helped me out.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311140439.8501";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311144470.8701";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>41</wp:comment_id>
            <wp:comment_author><![CDATA[saboor]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-01-23 05:33:41</wp:comment_date>
            <wp:comment_date_gmt>2012-01-23 05:33:41</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[useful description]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>61</wp:comment_id>
            <wp:comment_author><![CDATA[Tile regeneration | Escape From Enceladus Development Live Blog]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://gamedev.sleptlate.org/blog/56-tile-regeneration/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-06-13 04:18:28</wp:comment_date>
            <wp:comment_date_gmt>2012-06-13 04:18:28</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[...] I learned that setting the alpha channel of the color given to SpriteBatch.draw() does nothing. You have to multiply the color itself by your alpha, between 0 and 1. This is convenient, but I don&#8217;t know how I was supposed to figure it out.   [...]]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339561108.7798";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339940958.9235";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Linear Interpolation Between Values in XNA</title>
        <link>http://jason-mitchell.com/game-development/linear-interpolation-between-values-in-xna/</link>
        <pubDate>Mon, 14 Mar 2011 12:38:29 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/?p=273</guid>
        <description></description>
        <content:encoded><![CDATA[I thought that I would take some time to write up a quick article about using linear interpolation to smoothly transition between two values in XNA.  When I first found out how to do this it made a huge difference to the projects I work on.  Some examples of when I use this are for time based colour cycling and gradually modifying alpha values to fade out a texture over a defined period.  In general, I find that it is a simple method of adding some extra polish to any game.

<!--more-->

Performing linear interpolation between two values is incredibly simple thanks to the MathHelper.Lerp method provided by the XNA Framework.  The method signature is:
<pre lang="csharp">float MathHelper.Lerp(float value1, float value2, float amount)</pre>
The parameters <strong><em>value1</em></strong> and <strong><em>value2</em></strong> are the two values we want to interpolate between.  The <strong><em>amount</em></strong> parameter is a value between 0 and 1 which determines the result of the interpolation between the two input values.  The closer the <strong><em>amount</em></strong> value is to 0, the closer the result will be to <strong><em>value1 </em></strong>and the closer the <strong><em>amount</em></strong> value is to 1, the closer the result will be to <strong><em>value2</em></strong>.

As I said above, I typically use this for time based interpolation so I’m going to do a quick example of that but you can calculate the value of the <em><strong>amount</strong> </em>parameter any way you want.  What the following demo application will do is simply interpolate the colour used for the GraphicsDevice.Clear method between red and green over a period of 5 seconds.

You will find the code for the application below and then I will briefly highlight some of the key areas.  I won’t be including a download with this article since the following class is literally all there is to it; not counting Program.cs.  I’ve also trimmed away all of the excess methods that I’m not using for this example.
<pre lang="csharp">public class Game1 : Game
{
    private GraphicsDeviceManager graphics;

    private const int Duration = 5000;
    private Color backgroundColor = Color.Red;
    private float elapsedTime;

    public Game1()
    {
        graphics = new GraphicsDeviceManager(this);
    }

    protected override void Update(GameTime gameTime)
    {
        elapsedTime += (float) gameTime.ElapsedGameTime.TotalMilliseconds;
        float amount = MathHelper.Clamp(elapsedTime / Duration, 0, 1);

        byte value = (byte) MathHelper.Lerp(255, 0, amount);

        backgroundColor.R = value;
        backgroundColor.G = (byte) (255 - value);
    }

    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(backgroundColor);
    }
}</pre>
The first thing to note is my variable definitions at the top of the class.  The <strong><em>Duration</em></strong> constant defines how long the interpolation will last for in <em>milliseconds, <strong>backgroundColor</strong></em> is simply a variable to hold the current colour values and the <strong><em>elapsedTime</em></strong> variable is used to track how much time has passed in the interpolation.

First I’m going to skip over the Update method and point out that all the Draw method is doing is using the <strong><em>backgroundColor</em></strong> variable to clear the screen.  The colour values in this instance will be modified in the Update method to give us a smooth change from red to green.

In the Update method, the first thing I’m doing is to add the elapsed time for the current game frame to the <strong><em>elapsedTime</em></strong> variable.  The next line will calculate the value of the <strong><em>amount</em></strong> parameter required for the MathHelper.Lerp method.  This is pretty simple as all that needs to be done is to divide the total time that has passed by our defined duration.  I also use the MathHelper.Clamp method on this line to ensure that the value is always between 0 and 1 otherwise the interpolation will seem to loop.

The next step is to use the MathHelper.Lerp method to perform the interpolation so all that is needed here is to fill in the parameters.  In my example I’m essentially interpolating the value of the red channel and using this to calculate the amount of green rather than doing two separate interpolations.  To do this I defined <strong><em>value1</em></strong> as 255, <strong><em>value2</em></strong> as 0 and passed in my variable containing my calculated <strong><em>amount</em></strong> value and then cast the result to a byte.

The last step is to simply use the resulting values to set the colours which is pretty straightforward so I won’t explain it here.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>273</wp:post_id>
        <wp:post_date>2011-03-14 12:38:29</wp:post_date>
        <wp:post_date_gmt>2011-03-14 12:38:29</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>linear-interpolation-between-values-in-xna</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,mathhelper,lerp,interpolation,mathhelper.lerp]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Using the MathHelper.Lerp method in XNA to perform time based interpolations.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Linear Interpolation Between Values in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/hRBB5Q]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Linear Interpolation Between Values in XNA http://bit.ly/mDRjt8]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=273]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/mDRjt8]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.jason-mitchell.com/index.php/2011/03/14/linear-interpolation-between-values-in-xna/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Using the MathHelper.Lerp method in XNA to perform time based linear Interpolation.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,mathhelper,lerp,interpolation,mathhelper.lerp]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Linear Interpolation Between Values in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338312]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[79]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[Linear Interpolation]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430348951;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:270;}i:1;a:1:{s:2:"id";i:304;}i:2;a:1:{s:2:"id";i:177;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>72</wp:comment_id>
            <wp:comment_author><![CDATA[Bernardo Lopes]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-12-01 14:31:13</wp:comment_date>
            <wp:comment_date_gmt>2012-12-01 14:31:13</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Very helpful post! Thanks.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354372273.9738";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354380480.7284";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>1208</wp:comment_id>
            <wp:comment_author><![CDATA[simon]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-07-15 12:47:47</wp:comment_date>
            <wp:comment_date_gmt>2014-07-15 12:47:47</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Yep very helpful.

Thanks]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405428467.6287501;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405605688.9217179;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Contact Me</title>
        <link>http://jason-mitchell.com/uncategorized/contact-me/</link>
        <pubDate>Sat, 06 Apr 2013 12:49:28 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=649</guid>
        <description></description>
        <content:encoded><![CDATA[]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>649</wp:post_id>
        <wp:post_date>2013-04-06 12:49:28</wp:post_date>
        <wp:post_date_gmt>2013-04-06 12:49:28</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>contact-me</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>3</wp:menu_order>
        <wp:post_type>nav_menu_item</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="nav_menu" nicename="links"><![CDATA[Links]]></category>
        <wp:postmeta>
            <wp:meta_key>_menu_item_type</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object_id</wp:meta_key>
            <wp:meta_value><![CDATA[649]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_classes</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_xfn</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_url</wp:meta_key>
            <wp:meta_value><![CDATA[mailto:contact at jason-mitchell.com]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title></title>
        <link>http://jason-mitchell.com/software-development/visual-studio-regions-make-me-cringe/attachment/regions/</link>
        <pubDate>Fri, 21 Jun 2013 12:00:44 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/wp-content/uploads/2013/06/regions.png</guid>
        <description></description>
        <content:encoded><![CDATA[]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>726</wp:post_id>
        <wp:post_date>2013-06-21 12:00:44</wp:post_date>
        <wp:post_date_gmt>2013-06-21 12:00:44</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>regions</wp:post_name>
        <wp:status>inherit</wp:status>
        <wp:post_parent>723</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>attachment</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <wp:attachment_url>http://jason-mitchell.com/wp-content/uploads/2013/06/regions.png</wp:attachment_url>
        <wp:postmeta>
            <wp:meta_key>_wp_attached_file</wp:meta_key>
            <wp:meta_value><![CDATA[2013/06/regions.png]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
            <wp:meta_value><![CDATA[a:5:{s:5:"width";i:426;s:6:"height";i:241;s:4:"file";s:19:"2013/06/regions.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"regions-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"regions-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
            <wp:meta_value><![CDATA[Regions]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Contact me</title>
        <link>http://jason-mitchell.com/uncategorized/contact-me-2/</link>
        <pubDate>Tue, 29 Oct 2013 22:46:27 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=937</guid>
        <description></description>
        <content:encoded><![CDATA[]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>937</wp:post_id>
        <wp:post_date>2013-10-29 22:46:27</wp:post_date>
        <wp:post_date_gmt>2013-10-29 22:46:27</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>contact-me-2</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>1</wp:menu_order>
        <wp:post_type>nav_menu_item</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="nav_menu" nicename="contact"><![CDATA[Contact]]></category>
        <wp:postmeta>
            <wp:meta_key>_menu_item_type</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object_id</wp:meta_key>
            <wp:meta_value><![CDATA[937]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_object</wp:meta_key>
            <wp:meta_value><![CDATA[custom]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_classes</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_xfn</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_menu_item_url</wp:meta_key>
            <wp:meta_value><![CDATA[mailto:contact@jason-mitchell.com]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>XNA IntermediateSerializer</title>
        <link>http://jason-mitchell.com/game-development/xna-intermediateserializer/</link>
        <pubDate>Wed, 06 Apr 2011 12:50:31 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2011/04/06/xna-intermediateserializer/</guid>
        <description></description>
        <content:encoded><![CDATA[Recently I’ve been doing a lot of <a href="http://create.msdn.com" target="_blank">XNA</a> work which involves loading XML files via the content pipeline and I frequently found myself wanting to do more with the IntermediateSerializer than the basics.  I did a bit of a search and came up with the following blog article by <a href="http://blogs.msdn.com/b/shawnhar/" target="_blank">Shawn Hargreaves</a> that has helped me out loads:

<a title="http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx" href="http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx">http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx</a>

For anyone working with XML and the content pipeline in XNA I strongly recommend taking a read through it!]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>282</wp:post_id>
        <wp:post_date>2011-04-06 12:50:31</wp:post_date>
        <wp:post_date_gmt>2011-04-06 12:50:31</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-intermediateserializer</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,content,pipeline,intermediateserializer,xml]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[I recently came across this great article by  Shawn Hargreaves on using the XNA IntermediateSerializer for loading XML through the XNA content pipeline.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/ekn6Wd]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: XNA IntermediateSerializer http://bit.ly/lPlefx]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=282]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/lPlefx]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA IntermediateSerializer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[I recently came across this great article by Shawn Hargreaves on using the XNA IntermediateSerializer for loading XML through the XNA content pipeline.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,content,pipeline,intermediateserializer,xml]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA IntermediateSerializer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[57]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[intermediateserializer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1469789004]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430631525;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:99;}i:1;a:1:{s:2:"id";i:564;}i:2;a:1:{s:2:"id";i:202;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>XNA Gestures Helper for Windows Phone 7</title>
        <link>http://jason-mitchell.com/game-development/xna-gestures-helper-for-windows-phone-7/</link>
        <pubDate>Fri, 08 Apr 2011 13:15:41 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/?p=285</guid>
        <description></description>
        <content:encoded><![CDATA[For my final year project at university I’ve been doing a bit of work with Windows Phone 7 and naturally that has involved working with gestures a bit.  I think the gesture support in <a href="http://create.msdn.com" target="_blank">XNA</a> 4 is great but I found myself writing the same code over and over again to handle them.  So I decided to make a GestureHelper class which would take care of a lot of the repetitive work for me.  I’ve attached a sample project containing my gesture helper and a couple of examples of using it.

<!--more-->

The class I created is basically an XNA game component which maintains a dictionary of gestures and an associated list of delegates and provides some obvious methods to add and remove gesture callbacks.  The Update method will take care of reading in the gestures from the touch screen and then calling the delegates for any gesture detected.  The code is listed below:
<pre lang="csharp" escaped="true">using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input.Touch;

namespace GestureHelperTest
{
    public class GestureHelper : GameComponent
    {
        public static GestureHelper Instance { get; private set; }

        public static void Initialize(Game game)
        {
            if (Instance != null)
                throw new InvalidOperationException("Only one instance of GestureHelper can be created.");

            Instance = new GestureHelper(game);
            game.Components.Add(Instance);
        }

        private Dictionary&lt;GestureType, List&lt;Action&lt;GestureSample&gt;&gt;&gt; gestureCallbacks;

        private GestureHelper(Game game) : base(game)
        {
            TouchPanel.EnabledGestures = GestureType.None;
            gestureCallbacks = new Dictionary&lt;GestureType, List&lt;Action&lt;GestureSample&gt;&gt;&gt;();
        }

        public void AddCallback(GestureType gestureType, Action&lt;GestureSample&gt; callback)
        {
            if (!gestureCallbacks.ContainsKey(gestureType))
            {
                TouchPanel.EnabledGestures |= gestureType;
                gestureCallbacks.Add(gestureType, new List&lt;Action&lt;GestureSample&gt;&gt;());
            }

            gestureCallbacks[gestureType].Add(callback);
        }

        public void Clear()
        {
            TouchPanel.EnabledGestures = GestureType.None;
            gestureCallbacks.Clear();
        }

        public void ClearGesture(GestureType gestureType)
        {
            TouchPanel.EnabledGestures -= gestureType;
            gestureCallbacks.Remove(gestureType);
        }

        public override void Update(GameTime gameTime)
        {
            while (TouchPanel.IsGestureAvailable)
            {
                GestureSample gestureSample = TouchPanel.ReadGesture();

                if (gestureCallbacks.ContainsKey(gestureSample.GestureType))
                {
                    foreach (Action&lt;GestureSample&gt; callback in gestureCallbacks[gestureSample.GestureType])
                        callback(gestureSample);
                }
            }

            base.Update(gameTime);
        }
    }
}</pre>
The class is basically implemented as a singleton but with a little bit of a deviation.  I’ve opted to not allow lazy initialization of the class in favour of requiring the user to explicitly initialize it to keep it nice and clean when creating the game component.  Adding the GestureHelper to the components list could be done in the game class but it will basically amount to the same thing (ie requiring the user to perform some initialization step).

In the sample project I’ve created, I provide the following examples of how to handle a gesture with my GestureHelper class:
<pre lang="csharp" escaped="true">protected override void Initialize()
{
    GestureHelper.Initialize(this);
    GestureHelper.Instance.AddCallback(GestureType.FreeDrag, gestureSample =&gt; position = gestureSample.Position);
    GestureHelper.Instance.AddCallback(GestureType.Hold, gestureSample =&gt; scale = 1);
    GestureHelper.Instance.AddCallback(GestureType.Tap, ScaleSquare);

    base.Initialize();
}

private void ScaleSquare(GestureSample gestureSample)
{
    scale += 0.1f;
}</pre>
The first two examples pass lambda expressions to the AddCallback method and the third passes a method.  Once these delegates have been added that’s it!  No more code is needed to handle these gestures!

This class is the result of a bit of experimentation that has been working out well for me.  I’d really appreciate any opinions that others might have on this approach to handling gestures.

<em><strong>Sample Project: <a title="http://www.jason-mitchell.com/Uploads/GestureHelperTest-08_04_11.zip" href="http://www.jason-mitchell.com/Uploads/GestureHelperTest-08_04_11.zip">http://www.jason-mitchell.com/Uploads/GestureHelperTest-08_04_11.zip</a></strong></em>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>285</wp:post_id>
        <wp:post_date>2011-04-08 13:15:41</wp:post_date>
        <wp:post_date_gmt>2011-04-08 13:15:41</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-gestures-helper-for-windows-phone-7</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="nui"><![CDATA[nui]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="touch"><![CDATA[touch]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: XNA Gesture Helper for Windows Phone 7 http://bit.ly/jqf7gc]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jasonmitche.eweb704.discountasp.net/?p=285]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/jqf7gc]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/hSFDLd]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://www.jason-mitchell.com/index.php/2011/04/08/xna-gesture-helper-for-windows-phone-7/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[For a recent project I’ve been working with Windows Phone 7 and has involved working with gestures.  I decided to make a class to handle the repetitive work.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,window,phone,7,wp7,gestures,gesture]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA Gesture Helper for Windows Phone 7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[For a recent project I’ve been working with XNA on Windows Phone 7 and has involved working with gestures. I decided to make a class to handle the repetitive work.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,window,phone,7,wp7,gestures,gesture]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA Gestures Helper for Windows Phone 7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[82]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1471561761]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[gestures]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_old_slug</wp:meta_key>
            <wp:meta_value><![CDATA[xna-gesture-helper-for-windows-phone-7]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430342035;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:177;}i:1;a:1:{s:2:"id";i:273;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Imagine Cup Irish Finals 2011</title>
        <link>http://jason-mitchell.com/university/imagine-cup-irish-finals-2011/</link>
        <pubDate>Fri, 15 Apr 2011 19:01:09 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://www.jason-mitchell.com/index.php/2011/04/15/imagine-cup-irish-finals-2011/</guid>
        <description></description>
        <content:encoded><![CDATA[<p align="justify">On Wednesday and Thursday I was down at Microsoft Ireland in Dublin for the <a href="http://imaginecup.com/" target="_blank">Imagine Cup</a> Irish finals with the team I was mentoring from the University of Ulster Coleraine.  Unfortunately we didn’t make it into the top 5 but it was great for our team of first year students to get down and experience the whole event.</p>
<p align="justify">I left Microsoft on Thursday really impressed with the quality of the projects at the competition this year.  I really feel like the projects were a step up from the previous year and it was great to see so many people making use of Kinect and Windows Phone 7.  Big congratulations to Team HERMES from IT Sligo who came first and will go on to represent Ireland at the Imagine Cup world finals in New York.</p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>294</wp:post_id>
        <wp:post_date>2011-04-15 19:01:09</wp:post_date>
        <wp:post_date_gmt>2011-04-15 19:01:09</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>imagine-cup-irish-finals-2011</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="imagine-cup"><![CDATA[Imagine Cup]]></category>
        <category domain="category" nicename="university"><![CDATA[University]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[62]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[imagine cup]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1502083312]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429353075;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:268;}i:1;a:1:{s:2:"id";i:71;}i:2;a:1:{s:2:"id";i:285;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Observable Properties in XNA</title>
        <link>http://jason-mitchell.com/game-development/observable-properties-in-xna/</link>
        <pubDate>Sat, 30 Apr 2011 10:57:54 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=304</guid>
        <description></description>
        <content:encoded><![CDATA[I like to experiment a lot with XNA to try and find ways of doing things which I haven’t tried before.  Recently I have been doing some reading around the <a href="http://msdn.microsoft.com/en-us/data/gg577609" target="_blank">.NET Reactive Extensions</a> and thought that it might be pretty useful to use something like that in an XNA game.  I played around with it a little bit and thought it was a little bit too “heavy” for what I wanted to do since it seems like I would need to define my observers as well as my observables. I was really looking for something that only required me to define my observable properties and subscribe to them using delegates without my other game engine classes needing to know anything about them.  By removing the knowledge of observers and observables from the other game engine classes it leaves the choice of whether or not to use a subscription-based approach open.

<!--more-->

The implementation of this seemed pretty simple.  I create a new class called Observable which provides methods for (un)subscribing and a property to access the actual value held by the class.  It uses a generic type to define the the value property so it should work in most cases.  So here is the class:
<pre lang="csharp" escaped="true">public class Observable&lt;T&gt;
{
    private readonly List&lt;Action&lt;T&gt;&gt; subscriptions = new List&lt;Action&lt;T&gt;&gt;();
    private T observableValue;

    public Action&lt;T&gt; Subscribe(Action&lt;T&gt; callback)
    {
        subscriptions.Add(callback);
        return callback;
    }

    public void Unsubscribe(Action&lt;T&gt; callback)
    {
        subscriptions.Remove(callback);
    }

    public void UnsubscribeAll()
    {
        subscriptions.Clear();
    }

    private void NotifyValueChanged()
    {
        foreach (Action&lt;T&gt; callback in subscriptions)
            callback(observableValue);
    }

    public T Value
    {
        get { return observableValue; }
        set
        {
            observableValue = value;
            NotifyValueChanged();
        }
    }
}</pre>
The class is really simple so I don’t think its worth stepping through the code and explaining it all.  The only thing I do want to point out is the Subscribe method.  It returns the exact same delegate as was passed into the method.  This is really just for convenience if you use a lambda expression to subscribe and need to hold on to it to unsubscribe from the Observable instance later.

To use this class all you need to do is define a new instance of the Observable type (you can see this in the attached demo project) and then use the Value property to set the data in the class.  For example if you wanted an observable Vector2 instance you would define it as “Observable&lt;Vector2&gt; position = new Observable&lt;Vector2&gt;()” and then set its value by using “position.Value = new Vector2(……)”.

I can see using an approach like this would be useful in a few situations.  First of all I think it would be great for separating a game’s logic from its graphics by allowing the graphics in the game to subscribe to the positions of logical entities however there is a bit of redundant data in this approach.  I have also thought that it could be very useful in developing an artificial intelligence framework.  Elements in the game could subscribe to changes in the state of an AI agent and run some code when it changes.  I’m really just throwing around some ideas here.

<strong>Update:</strong>
So I had a bit of a thought about the class in this post. It's all well and good when you want to be notified of <em>every</em> change to a property but at the minute I can't think of a scenario in XNA when I would want that to happen.  Perhaps maybe a position gets modified multiple times in one update (e.g. moving player and finding a collision then "fixing" the players position) which in my sample would result in loads of code being executed for no real reason.  I'm currently playing with a different approach to implement this kind of process which makes use of a GameComponent to notify all interested objects once per update if something has changed.  I will probably post that when I am happy with it - so far I have removed the need for the Observable class in this article but the objects containing observable values must implement an interface for use with the game component.  At the minute I'm trying INotifyPropertyChanged to avoid adding a custom interface but there seems to be a couple of issues that I need to work out here.

<strong><em>Sample Project: <a title="http://www.jason-mitchell.com/uploads/XNAObservableDemo-30_04_2011.zip" href="http://www.jason-mitchell.com/uploads/XNAObservableDemo-30_04_2011.zip">http://www.jason-mitchell.com/uploads/XNAObservableDemo-30_04_2011.zip</a></em></strong>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>304</wp:post_id>
        <wp:post_date>2011-04-30 10:57:54</wp:post_date>
        <wp:post_date_gmt>2011-04-30 10:57:54</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>observable-properties-in-xna</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="infrastructure"><![CDATA[infrastructure]]></category>
        <category domain="post_tag" nicename="observable"><![CDATA[observable]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[http://bit.ly/iib1pc]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[http://jason-mitchell.com/?p=304]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[New post: Observable Properties in XNA http://bit.ly/iib1pc]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Observable Properties in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[I like to experiment a lot with XNA to try and find ways of doing things which I haven't tried before.  Recently I have been looking into observable properties.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,observable,observer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[85]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[I like to experiment a lot with XNA to try and find ways of doing things which I haven't tried before. Recently I have been looking into observable properties.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,observable,observer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Observable Properties in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[observable]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338210]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429029177;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:357;}i:1;a:1:{s:2:"id";i:75;}i:2;a:1:{s:2:"id";i:202;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>42</wp:comment_id>
            <wp:comment_author><![CDATA[Josh Elster]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.liquidelectron.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-02-03 20:12:47</wp:comment_date>
            <wp:comment_date_gmt>2012-02-03 20:12:47</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I've been playing around with a proof-of-concept game based around an event-driven, reactive model. Using the Reactive Extensions, it's looking quite simple (once the learning curve is breached) to create a loosely-coupled engine. I'm planning a post to present the design, and I'd be interested to hear your take on the feasibility of the design.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328299967.5801";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>43</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-02-03 21:55:47</wp:comment_date>
            <wp:comment_date_gmt>2012-02-03 21:55:47</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[This sort of model is something I'm really interested in and am currently using in a basic form in a personal game engine project myself.  I think it is definitely a feasible approach as long as you take into consideration the frequency which your observables will be notifying their observers.

My implementation isn't using the Reactive Extensions (something I know very little about) but rather my own lightweight implementation which is a little different to what I described here due to a change in my needs.  It seems to have scaled reasonably well in some demo projects I had made which had 2209 pairs of models (4418 updating objects altogether).  One model in each pair subscribed to changes in the orientation and position of the other and it ran pretty well.  The FPS dropped to around 30 however by looking at the profiler it seemed like this could be improved with a better rendering algorithm which is unrelated to the test I was performing.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>42</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328306147.9287";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>44</wp:comment_id>
            <wp:comment_author><![CDATA[Josh Elster]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.liquidelectron.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-02-04 19:58:31</wp:comment_date>
            <wp:comment_date_gmt>2012-02-04 19:58:31</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I've been able to completely decouple the rendering from the objects in my spike app - objects are rendered via events published to a render object's subscription. The subscription is defined by a LINQ Rx query, which hooks into a render queue which can be grouped and filtered, allowing rendering to be efficiently batched, with reasonably good results (so far). Culling render requests, as an example, could be implemented with a single .Where() clause on the render query. Since LINQ queries are inherently composable, it's easy to imagine how complex rendering could be accomplished in a straight-forward fashion. I'm able to render &gt; 100 objects (not all moving, but some) with a nice steady frame rate. More importantly at this time though, I wanted to know what the memory and GC usage was, with all these events being created and passed around. Surprisingly (and I was a bit shocked), it was very constant, with no leaks and minimal GC activity (no objects collected in G0, so GC no-ops). The big no-no I've run into so far that could be concerning is that I've had to clear each domain object's local event cache after every call to Update(), otherwise the framerate will plummet over a few seconds as events (messages) pile up and queries get more expensive.

The Rx approach seems to have a crap-ton of promise, but it is a bit difficult to wrap your head around, and requires a shift in design philosophy, as well as creating some problems of its own. For pure XNA development, some wrapping/support logic is needed to synchronize object events and reactive queries with the game loop.

For Silverlight+XNA or pure SL scenarios though, it can be much more simple to use, since games in those frameworks are already asynchronous and event-driven by nature.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1328385512.086";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>45</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-02-04 21:49:25</wp:comment_date>
            <wp:comment_date_gmt>2012-02-04 21:49:25</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[That sounds pretty neat.  I think there is definitely something to gain from using this approach and I definitely agree that there is a bit of a shift in philosophy required.

I use this kind of approach for handling game input and its worked well for me so.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>44</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328392165.9688";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Kinect SDK Extension Methods</title>
        <link>http://jason-mitchell.com/game-development/kinect-sdk-extension-methods/</link>
        <pubDate>Mon, 27 Jun 2011 17:02:33 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=340</guid>
        <description></description>
        <content:encoded><![CDATA[In this article I’m sharing a couple of quick extension methods I made for working with the Kinect SDK Beta.  I was experimenting with using the Kinect sensor in an XNA project and found myself wanting to do two things; convert the output from the RGB stream to a Texture2D and to get the position of a joint from the sensors skeleton tracking functionality relative to the game screen dimensions.

<!--more-->

The following code shows the implementation of these extension methods.  I must add that this code is pretty much taken straight out of the samples and that I have just reorganised it to make it a bit easier to use.
<pre lang="csharp" escaped="true">public static class KinectExtensions
{
    private static Texture2D texture = null;
    private static Color[] colorData = null;

    public static Texture2D ToTexture2D(this PlanarImage image, GraphicsDevice graphicsDevice)
    {
        if(texture == null || colorData == null)
        {
            texture =
                new Texture2D(graphicsDevice, image.Width, image.Height, false, SurfaceFormat.Color);
            colorData = new Color[image.Width * image.Height];
        }

        int index = 0;
        for (int y = 0; y &lt; image.Height; y++)
        {
            for (int x = 0; x &lt; image.Width; x++, index += image.BytesPerPixel)
                colorData[y * image.Width + x] =
                    new Color(image.Bits[index + 2], image.Bits[index + 1], image.Bits[index + 0]);
        }

        texture.SetData(colorData);
        return texture;
    }

    public static Vector2 GetScreenPosition(this Joint joint, Runtime kinectRuntime, int screenWidth, int screenHeight)
    {
        float depthX;
        float depthY;

        kinectRuntime.SkeletonEngine.SkeletonToDepthImage(joint.Position, out depthX, out depthY);
        depthX = Math.Max(0, Math.Min(depthX * 320, 320));  //convert to 320, 240 space
        depthY = Math.Max(0, Math.Min(depthY * 240, 240));  //convert to 320, 240 space

        int colorX;
        int colorY;
        // only ImageResolution.Resolution640x480 is supported at this point
        kinectRuntime.NuiCamera.GetColorPixelCoordinatesFromDepthPixel(ImageResolution.Resolution640x480, new ImageViewArea(), (int)depthX, (int)depthY, (short)0, out colorX, out colorY);

        // map back to skeleton.Width &amp; skeleton.Height
        return new Vector2(screenWidth * colorX / 640.0f, screenHeight * colorY / 480f);
    }
}}</pre>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>340</wp:post_id>
        <wp:post_date>2011-06-27 17:02:33</wp:post_date>
        <wp:post_date_gmt>2011-06-27 17:02:33</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>kinect-sdk-extension-methods</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="extension-method"><![CDATA[extension method]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="kinect-2"><![CDATA[kinect]]></category>
        <category domain="post_tag" nicename="natural-user-interface"><![CDATA[natural user interface]]></category>
        <category domain="post_tag" nicename="nui"><![CDATA[nui]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,kinect,sdk]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Extension methods for the Kinect SDK to use with XNA to convert the RGB camera image into a Texture2D object and to get a joint position relative to the window.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Kinect SDK Extension Methods]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[yes]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Extension methods for the Kinect SDK to use with XNA to convert the RGB camera image into a Texture2D object and to get a joint position relative to the window.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,kinect,sdk]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Kinect SDK Extension Methods]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[kinect]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338313]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430743797;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:204;}i:1;a:1:{s:2:"id";i:357;}i:2;a:1:{s:2:"id";i:285;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>46</wp:comment_id>
            <wp:comment_author><![CDATA[Hassan Selim]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.hassanselim.me/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-07-11 14:31:02</wp:comment_date>
            <wp:comment_date_gmt>2011-07-11 14:31:02</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I just wanted to point out that you shouldn't create a new Texture2D on every frame but rather update the same Texture2D (because it's always has the same width and height), and it would also be better to reuse the same Color array.
I know there wont be a big difference with simple stuff, but if you're doing something big then you'll start noticing the dark side of the Garbage Collector :S]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310394662.9804";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310394753.4161";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>47</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-07-11 14:40:56</wp:comment_date>
            <wp:comment_date_gmt>2011-07-11 14:40:56</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[That's a great point! When I get a chance I'll update the code in the article to include these changes.

Thanks :)]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>46</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310395256.3915";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>48</wp:comment_id>
            <wp:comment_author><![CDATA[Prem Kiran]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-20 21:43:18</wp:comment_date>
            <wp:comment_date_gmt>2011-11-20 21:43:18</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hey Jason,

Did ya manage to update the code yet?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321825398.9533";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>49</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-21 20:34:05</wp:comment_date>
            <wp:comment_date_gmt>2011-11-21 20:34:05</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Totally forgot about that!  It's updated now - I haven't tested it but it **should** work.  You should maybe also take a look at http://jason-mitchell.com/programming/xna-texture2d-creation-byte-vs-color/]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>48</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321907645.8237";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Basic XNA and Kinect SDK Sample</title>
        <link>http://jason-mitchell.com/game-development/basic-xna-and-kinect-sdk-sample/</link>
        <pubDate>Tue, 28 Jun 2011 15:10:55 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/2011/06/28/basic-xna-and-kinect-sdk-sample/</guid>
        <description></description>
        <content:encoded><![CDATA[This past week I have spent a little bit of time playing with the Kinect SDK and trying to get to grips with how it all works.  My biggest interest is to use the Kinect SDK along with Microsoft’s XNA Framework for games development so I made a sample project using these technologies.  I’ve posted a link to this project at the end of the article.

<!--more-->

The idea of this project was pretty simple.  I wanted to get the RGB camera stream of me goofing around and use it as the background in an XNA application.  I also wanted to try out some skeleton tracking functionality to test when my hands are intersecting with hot spots (represented as semi-transparent squares) on the screen.  As it turns out, this project was pretty simple and quick to make and overall I’m really quite impressed with how the SDK is to use.

This project makes use of a couple of <a href="http://jason-mitchell.com/2011/06/27/kinect-sdk-extension-methods/" target="_blank">simple extension methods I created</a> and is fairly heavily based on the samples which get installed with the Kinect SDK.

<strong><em>Download: <a title="http://jason-mitchell.com/Uploads/XNA_And_Kinect-28_06_11.zip" href="http://jason-mitchell.com/Uploads/XNA_And_Kinect-28_06_11.zip">http://jason-mitchell.com/Uploads/XNA_And_Kinect-28_06_11.zip</a></em></strong>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>357</wp:post_id>
        <wp:post_date>2011-06-28 15:10:55</wp:post_date>
        <wp:post_date_gmt>2011-06-28 15:10:55</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>basic-xna-and-kinect-sdk-sample</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="kinect-2"><![CDATA[kinect]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[70]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[kinect]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Basic XNA and Kinect SDK Sample]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[With Microsoft opening up their Kinect camera by releasing an SDK for it, I decided to take a look at the basics of getting it working in an XNA game.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,kinect,sdk,texture2d,skeleton]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Basic sample showing the use of the Kinect SDK & XNA showing the conversion of RGB stream to a Texture2D and using the skeleton to intersect with game objects.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Basic XNA and Kinect SDK Sample]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[xna,kinect,sdk,texture2d,skeleton]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338111]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430750316;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:340;}i:1;a:1:{s:2:"id";i:378;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>50</wp:comment_id>
            <wp:comment_author><![CDATA[Pablo]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-10-13 04:55:14</wp:comment_date>
            <wp:comment_date_gmt>2011-10-13 04:55:14</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi, I am really interesting in your kinect samples,,but I wanna know how run your xna and kinect 28-06-11 sample of the file?
have a .exe file in the folder inside?
thanks in advance and I hope see more samples in this website in the future]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318481714.8494";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>51</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-10-13 13:56:39</wp:comment_date>
            <wp:comment_date_gmt>2011-10-13 13:56:39</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[There's no .exe in there.  To run it you will need to have Visual Studio 2010 installed, XNA 4.0 and the Kinect SDK so you can build the project.  If you are really interested in running it without these installed then send me an email and I will try to get back to you with an installer or something.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318514199.5253";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>52</wp:comment_id>
            <wp:comment_author><![CDATA[michael mapes]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://michael-mapes.com/wordpress</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-18 03:59:47</wp:comment_date>
            <wp:comment_date_gmt>2011-11-18 03:59:47</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I was reading about a xna and kinect project you wrote. I am starting to do a little work in development myself. I want to make something usefull for some friends that run a nonprofit for disabled adults trying to transform into people that are more independant. Any pointers? I am trying to avoid having to buy the extra usb cable and also want to have it setup on my laptop so that when I visit them I can just send the project to their xbox. thanks for any advice in advance. I also was going to add you as a linked in contact, but thought it wise to post here first.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321588787.8324";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>53</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-18 08:57:31</wp:comment_date>
            <wp:comment_date_gmt>2011-11-18 08:57:31</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Michael,

That sounds like a great project to work on.  Unfortunately I'm far from an expert on development with the Kinect SDK so I don't really have any pointers.  You might want to see my other article with some code that I found useful when doing Kinect with XNA (http://jason-mitchell.com/programming/kinect-sdk-extension-methods/).

If you're doing this kind of work, I think the extra USB cable is going to be essential because it will allow you to debug on your laptop.  I could be wrong, but I don't think you can currently use Kinect on the Xbox at this point in time. I haven't tried to do this so I don't really know.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321606651.8966";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>54</wp:comment_id>
            <wp:comment_author><![CDATA[michael mapes]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://michael-mapes.com/wordpress</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-19 03:54:52</wp:comment_date>
            <wp:comment_date_gmt>2011-11-19 03:54:52</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I had read the other article already, but since i am brand spanking new to it all, it did not shed much light for me. When I read the title of your article, I thought you were connecting to the kinect via xna studio. I started one basic project that transfered from xna to my box with a basic blue screen and a little space ship. I did not give it much attention for a while, and now i have refound determination. If I have to get the usb cable then so be it. Just wanted to have some dork power. thanks.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1321674892.632";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>55</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2011-11-19 17:01:47</wp:comment_date>
            <wp:comment_date_gmt>2011-11-19 17:01:47</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sorry it's just an XNA game running on Windows.  The Xbox is a little more restricted than PC in terms of what you can actually do so I'm not sure that a deployed XNA game would work.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1321722107.131";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect</title>
        <link>http://jason-mitchell.com/software-development/asp-net-the-incoming-tabular-data-stream-tds-remote-procedure-call-rpc-protocol-stream-is-incorrect/</link>
        <pubDate>Fri, 02 Sep 2011 19:43:57 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/programming/asp-net-the-incoming-tabular-data-stream-tds-remote-procedure-call-rpc-protocol-stream-is-incorrect/</guid>
        <description></description>
        <content:encoded><![CDATA[<p align="justify">While working on my current ASP.NET project at work I encountered the following error when trying to call the SubmitChanges method on my LINQ to SQL data context:</p>

<blockquote>
<p align="justify"><em>The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect. Parameter 3 ("@p0"): The supplied value is not a valid instance of data type float. Check the source data for invalid values. An example of an invalid value is data of numeric type with scale greater than precision.</em></p>
</blockquote>
<!--more-->
<p align="justify">This error message was accompanied with the following stack trace showing the exception being thrown from deep within the bowels of LINQ to SQL:</p>

<blockquote>System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection) +2062078
System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection) +5050204
System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning() +234
System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj) +2275
System.Data.SqlClient.SqlDataReader.ConsumeMetaData() +33
System.Data.SqlClient.SqlDataReader.get_MetaData() +86
System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString) +311
System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async) +987
System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, DbAsyncResult result) +162
System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method) +32
System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method) +141
System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior) +12
System.Data.Common.DbCommand.ExecuteReader() +12
System.Data.Linq.SqlClient.SqlProvider.Execute(Expression query, QueryInfo queryInfo, IObjectReaderFactory factory, Object[] parentArgs, Object[] userArgs, ICompiledSubQuery[] subQueries, Object lastResult) +1266
System.Data.Linq.SqlClient.SqlProvider.ExecuteAll(Expression query, QueryInfo[] queryInfos, IObjectReaderFactory factory, Object[] userArguments, ICompiledSubQuery[] subQueries) +113
System.Data.Linq.SqlClient.SqlProvider.System.Data.Linq.Provider.IProvider.Execute(Expression query) +344
System.Data.Linq.StandardChangeDirector.DynamicInsert(TrackedObject item) +151
System.Data.Linq.StandardChangeDirector.Insert(TrackedObject item) +235
System.Data.Linq.ChangeProcessor.SubmitChanges(ConflictMode failureMode) +336
System.Data.Linq.DataContext.SubmitChanges(ConflictMode failureMode) +378
System.Data.Linq.DataContext.SubmitChanges() +23</blockquote>
<p align="justify">The exception message is very specific about what the problem actually was: <em>“The supplied value is not a valid instance of data type float”.  </em>After a bit of searching the internet I found that the issue could be caused by trying to insert a double with an actual value of “NaN” or negative/positive infinity.  After a bit of investigation I was able to confirm that a value of “NaN” was being passed in therefore causing this exception.</p>
<p align="justify">After a bit more searching I found out that that <strong><em>a “NaN” value is generated as the result of dividing 0 by 0</em></strong>.  In the project I’ve been working on this calculation is entirely possible as it performs calculations using external data.  To fix the issue I determined what calculation was generating the “NaN” values and used the <strong>double.IsNaN</strong> method to check for any invalid values and replaced them with 0.</p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>374</wp:post_id>
        <wp:post_date>2011-09-02 19:43:57</wp:post_date>
        <wp:post_date_gmt>2011-09-02 19:43:57</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>asp-net-the-incoming-tabular-data-stream-tds-remote-procedure-call-rpc-protocol-stream-is-incorrect</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="asp-net-2"><![CDATA[asp.net]]></category>
        <category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
        <category domain="post_tag" nicename="exceptions"><![CDATA[exceptions]]></category>
        <category domain="post_tag" nicename="linq-to-sql"><![CDATA[linq to sql]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[yes]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[71]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[incoming tabular data stream]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Fixing a pesky "The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect." error in my LINQ to SQL application.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[asp.net,asp,tabular,data,stream,tds,remote,procedure,call,data,type,float]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[My encounter with "ASP.NET: "The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect." and how I fixed it!]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA["The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[asp.net,asp,tabular,data,stream,tds,remote,procedure,call,data,type,float]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454801530]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430749098;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:457;}i:1;a:1:{s:2:"id";i:605;}i:2;a:1:{s:2:"id";i:378;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Quick Tip: Turn off workflows when importing large amounts of data to SharePoint</title>
        <link>http://jason-mitchell.com/web-development/quick-tip-turn-off-workflows-when-importing-large-amounts-of-data-to-sharepoint/</link>
        <pubDate>Wed, 28 Sep 2011 21:49:24 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=381</guid>
        <description></description>
        <content:encoded><![CDATA[<p align="justify">Recently at work I’ve been working on a script to import large amounts of data (~800,000 list items) into a SharePoint site.  The first version of the script had obvious performance issues and I had estimated it to run for 29 hours.  <strong>Turning off workflows which start automatically when a new list item is created cut this time to around 3 hours.</strong></p>
<!--more-->
<p align="justify">The following PowerShell code shows a basic function which can be used to toggle workflows on a list off and on.  It shouldn’t take much work to convert this to C# if needed.</p>

<pre lang="php">$snapin = "Microsoft.SharePoint.PowerShell"
if((Get-PSSnapin -Name $snapin -ErrorAction SilentlyContinue) -eq $null)
{
    Add-PsSnapin $snapin
}

$spWeb = Get-SPWeb http://sharepoint-site-url

function toggle-workflows($listName, $enabled)
{
    $prevVersionPattern = ".+`(Previous.+`)"
    $spList = $spWeb.GetList("/Lists/$listName")
    $spListWorkflows = $spList.WorkflowAssociations

    $latestWorkflow = $spListWorkflows | where-object {
          -not ($_.Name -match $prevVersionPattern) } | select-object -first 1
    if($latestWorkflow)
    {
        write-host "$listname workflow: $enabled" -fore yellow
        $latestWorkflow.AutoStartCreate = $enabled
        $spListWorkflows.Update($latestWorkflow)
    }
}</pre>
<p align="justify">This function retrieves the specified list finds the <strong>first</strong> associated workflow which doesn’t have the “(Previous.. )” text in its name and sets it to the specified enabled status.  If you have more than one active associated workflow on your list this code will need to be update to handle an array of workflows instead of just a single result.</p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>381</wp:post_id>
        <wp:post_date>2011-09-28 21:49:24</wp:post_date>
        <wp:post_date_gmt>2011-09-28 21:49:24</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>quick-tip-turn-off-workflows-when-importing-large-amounts-of-data-to-sharepoint</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="data-migration"><![CDATA[data migration]]></category>
        <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
        <category domain="post_tag" nicename="powershell-2"><![CDATA[powershell]]></category>
        <category domain="post_tag" nicename="quick-tip-2"><![CDATA[quick tip]]></category>
        <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[yes]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Turn off workflows when importing large data to SharePoint]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Turning off workflows which run when an item is created in  a SharePoint list can greatly increase the performance of the process.  PowerShell snippet]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[sharepoint,data,import,list,workflows,powershell]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Turning off workflows which run when an item is created in a SharePoint list can greatly increase the performance of the process. PowerShell snippet]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[sharepoint,data,import,list,workflows,powershell]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Turn off workflows when importing large data to SharePoint]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[sharepoint]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1457697983]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430447644;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:561;}i:1;a:1:{s:2:"id";i:155;}i:2;a:1:{s:2:"id";i:227;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Data Access Using a Generic Repository in C#</title>
        <link>http://jason-mitchell.com/software-development/data-access-using-a-generic-repository-in-c/</link>
        <pubDate>Sun, 01 Jan 2012 21:30:40 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=407</guid>
        <description></description>
        <content:encoded><![CDATA[<p style="text-align: justify;">The repository pattern is an abstraction layer which provides a well-organised approach to maintaining a separation between an applications data access and business logic layers.  This gives us the important advantages of making code more maintainable and readable and improving the testability of our code.  It also works great with dependency injection!</p>
<p style="text-align: justify;">When I started looking at the repository pattern I found that a lot of the samples on the internet used explicitly typed repositories such as ICustomerRepository and IOrderRepository.  However for a website I'm currently working on all of my CRUD operations were pretty much the same and I wanted to reduce the amount of code I needed to write so I implemented a basic generic repository which would work with any of my data model classes.</p>
<p style="text-align: justify;"><!--more-->The following code snippet  is the interface for the basic repository I've been using:</p>
<p style="text-align: justify;">[gist file="IRepository.cs"]https://gist.github.com/jasonmitchell/4322305[/gist]</p>
<p style="text-align: justify;">This interface only defines the most basic data access operations and should probably be expanded on to provide support for beginning, committing and rolling back transactions.</p>
<p style="text-align: justify;">The following class is an implementation of IRepository which has been implemented to abstract access to an Entity Framework Code First data context:</p>
<p style="text-align: justify;">[gist file="EntityFrameworkRepository.cs"]https://gist.github.com/jasonmitchell/4322305[/gist]</p>
<p style="text-align: justify;">There's nothing particularly complicated about this class so  I'm just going to give a quick example on how to use it and leave it at that!  If you have the following class defined in an Entity Framework Code First data context:</p>
<p style="text-align: justify;">[gist file="Customer.cs"]https://gist.github.com/jasonmitchell/4322305[/gist]</p>
<p style="text-align: justify;">You could query your customer data really easily using a LINQ expression or a lambda expression:</p>
<p style="text-align: justify;">[gist file="Sample.cs"]https://gist.github.com/jasonmitchell/4322305[/gist]</p>
<p lang="csharp">For more information about the repository pattern see: <a href="http://msdn.microsoft.com/en-us/library/ff649690.aspx">http://msdn.microsoft.com/en-us/library/ff649690.aspx</a></p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>407</wp:post_id>
        <wp:post_date>2012-01-01 21:30:40</wp:post_date>
        <wp:post_date_gmt>2012-01-01 21:30:40</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>data-access-using-a-generic-repository-in-c</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="data-access"><![CDATA[data access]]></category>
        <category domain="post_tag" nicename="repository"><![CDATA[repository]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[77]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[generic repository]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Data Access Using a Generic Repository in C#]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[A basic generic repository implementation for Entity Framework in C#]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,generic,repository,data,access,layer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[A basic generic repository implementation in C# for abstracting data access and mapping operations.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Data Access Using a Generic Repository in C#]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,generic,repository,data,access,layer]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338393]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430770591;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:625;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>57</wp:comment_id>
            <wp:comment_author><![CDATA[James Hinson]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-01-02 12:05:55</wp:comment_date>
            <wp:comment_date_gmt>2012-01-02 12:05:55</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I stumbled accross your blog today looking at different peoples ideas on particle engines. I am a self educated software and programing tech which means I have many limitations. I can see you don't get many comments. Just wanted to say I enjoyed reading your posts.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325505955.8094";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>58</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://www.jason-mitchell.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-01-02 12:18:54</wp:comment_date>
            <wp:comment_date_gmt>2012-01-02 12:18:54</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Yeah it's pretty quiet around here.  I really appreciate your feedback!

Particles engines are something I really enjoy working with although I haven't done much with them recently.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>57</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325506734.2037";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>67</wp:comment_id>
            <wp:comment_author><![CDATA[Serame]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-10-19 12:08:28</wp:comment_date>
            <wp:comment_date_gmt>2012-10-19 12:08:28</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi,

Thanks for this it is a very Generic and robust solution.

I have one problem though, i can't compile i get "Constraints are not allowed on non-generic declarations" error, this is because the methods are not Generic.

Any tips

Thank you very much

Serame]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1350648508.7761";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354306380.5801";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>71</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-11-30 20:16:36</wp:comment_date>
            <wp:comment_date_gmt>2012-11-30 20:16:36</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sorry for the really late reply, I got out of the habit of frequently checking the site.

Looks like this is a formatting error in the article. I'll update it and it should compile.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>67</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354306596.1152";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>75</wp:comment_id>
            <wp:comment_author><![CDATA[Pete]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://Bitlinkit.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-12-22 16:58:29</wp:comment_date>
            <wp:comment_date_gmt>2012-12-22 16:58:29</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Also just want to thank you for clarifying Linq and repository patterns &amp; data access. The web isn't very informative / clear on it but this really helped me grasp a bit more than just the surface. Thanks.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356195509.431381;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356283981.0773749;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>80</wp:comment_id>
            <wp:comment_author><![CDATA[AllenStyle]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-01-25 03:52:08</wp:comment_date>
            <wp:comment_date_gmt>2013-01-25 03:52:08</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[It's amazing, thanks for your sharing!

Recently, I meet a problem. I am designing data access layer, I want to design db transaction mechanism at DAL.

So I have no idea weather DbContext has related techniques to handle it.

Would you give me some suggestions?

Thanks.

Best Regards,

AllenStyle]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359085928.7667291;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359564649.0518489;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>82</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-01-30 17:02:55</wp:comment_date>
            <wp:comment_date_gmt>2013-01-30 17:02:55</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[The DbContext.SaveChanges method will create an implicit transaction as far as I'm aware (I don't really use Entity Framework very often so I'm not sure).

If you need more than what the implicit transaction offers you might want to take a look at .NET's TransactionScope class.

Unfortunately I don't really have any more suggestions.  Problems like this are one of the main reasons I've moved away from using the Repository pattern in favour of using the context directly.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>80</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359565375.5227931;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>84</wp:comment_id>
            <wp:comment_author><![CDATA[AllenStyle]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-01-31 01:32:21</wp:comment_date>
            <wp:comment_date_gmt>2013-01-31 01:32:21</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hello, thanks for your reply.

It looks like you prefer to access data by using context directly, isn't it?

I'll see Transaction Scope class, that's a good tip for me.

Thanks,

AllenStyle]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359595941.102242;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>85</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-02-09 09:09:51</wp:comment_date>
            <wp:comment_date_gmt>2013-02-09 09:09:51</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sorry for the delay in replying.  Yeah I prefer working with the context directly now.  Sometimes it just results in less friction during development.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>84</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360400991.6368539;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>88</wp:comment_id>
            <wp:comment_author><![CDATA[AllenStyle]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-02-16 16:37:27</wp:comment_date>
            <wp:comment_date_gmt>2013-02-16 16:37:27</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Don't mind it. I think you give me a big help. Thank you very much!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>85</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1361032647.9555571;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>182</wp:comment_id>
            <wp:comment_author><![CDATA[ORMs, the Repository Pattern and Code Redunancies | Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://jason-mitchell.com/software-development/orms-the-repository-pattern-and-code-redunancies/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-09-11 18:27:45</wp:comment_date>
            <wp:comment_date_gmt>2013-09-11 18:27:45</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[&#8230;] always used something similar to the ORM and generic repository approach I wrote about in a previous article and it was something I always felt was the &#8220;right&#8221; thing to do.  The more I used it, [&#8230;]]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378924065.9616251;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378931201.4303751;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>186</wp:comment_id>
            <wp:comment_author><![CDATA[J0NNYZER0]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-10-30 03:37:00</wp:comment_date>
            <wp:comment_date_gmt>2013-10-30 03:37:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Jason,
How would I inject this into my controller?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1101769470]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>187</wp:comment_id>
            <wp:comment_author><![CDATA[J0NNYZER0]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-10-30 03:40:00</wp:comment_date>
            <wp:comment_date_gmt>2013-10-30 03:40:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[BTW,
Great post! And in response to my initial question about how I would inject the generic repo into my controller, would I even inject it or would I also have to tie it to whatever class I would pass into my repository? Could you provide an example kind sir? Thanks much!
Jonny Zero]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1101771419]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>188</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-10-30 13:01:00</wp:comment_date>
            <wp:comment_date_gmt>2013-10-30 13:01:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Glad you like it.  Since this repository is general purpose and can be used for any classes in your data model you should be able to inject an instance of IRepository directly into the controller.

I have no current examples written up but I will try to get one for you soon.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>187</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1101771419]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1102130196]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>189</wp:comment_id>
            <wp:comment_author><![CDATA[J0NNYZER0]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-11-03 02:50:00</wp:comment_date>
            <wp:comment_date_gmt>2013-11-03 02:50:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks Jason. Been busy with regular work so just getting back to the code that your solution would help with. Thanks! I am looking forward to the example whenever you get around to it. ( ;]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>188</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1102130196]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1106837948]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>190</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-11-03 11:17:00</wp:comment_date>
            <wp:comment_date_gmt>2013-11-03 11:17:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Here's a quick barebones sample using Ninject I put together https://github.com/jasonmitchell/generic-repository-ninject-sample.  I'll hopefully get it turned into a blog article at some point.

Because the IRepository interface itself does not have generic arguments and it's just the methods that are generic the binding is pretty simple (IRepository is bound to EntityFrameworkRepository).  If IRepository was modified to IRepository there could be a bit more effort required for the binding depending on what you want to do.

If you want to bind IRepository to CustomerRepository you would just set up explicit bindings between them (or it may be possible to write some smart discovery method).

If you want to bind IRepository to EntityFrameworkRepository then you can simply use a Ninject binding like: Bind(typeof(IRepository)).To(typeof(EntityFrameworkRepository));
This will let you inject IRepository/IRepository/IRepository into any controllers that need them.  Hope this helps]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>189</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1106837948]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1107141244]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>197</wp:comment_id>
            <wp:comment_author><![CDATA[Kabilan C#]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-01-03 17:48:00</wp:comment_date>
            <wp:comment_date_gmt>2014-01-03 17:48:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you so much Jason Mitchell... Wonderful post .. based on this i created my own repository for my app.. thank you again]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1185631266]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>217</wp:comment_id>
            <wp:comment_author><![CDATA[Ricardo Gomez]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-03-21 13:40:00</wp:comment_date>
            <wp:comment_date_gmt>2014-03-21 13:40:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Very Good!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1294740568]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>246</wp:comment_id>
            <wp:comment_author><![CDATA[David]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-06-12 16:59:00</wp:comment_date>
            <wp:comment_date_gmt>2014-06-12 16:59:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Awesome, many thanks!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1432298319]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>XNA and C#: Calling DateTime.Now is Expensive</title>
        <link>http://jason-mitchell.com/game-development/xna-and-c-calling-datetime-now-is-expensive/</link>
        <pubDate>Sat, 07 Jan 2012 20:39:29 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=429</guid>
        <description></description>
        <content:encoded><![CDATA[<p style="text-align: justify;">While working on a new game engine using XNA I decided to run Visual Studios profiling tools against a basic demo game to measure CPU usage.  The results showed that the update process used approximately 65% of the CPU time while the render process used roughly 25%.  This ratio was not what I had expected at all because the updating was fairly simple so I drilled down into report to find the culprit.  It turns out the code using up the most of the CPU time in the update was a call to DateTime.Now to use as a time stamp.</p>
<!--more-->
<p style="text-align: justify;">First I want to provide a bit of context on how DateTime.Now is being called.  My game engine includes a messaging system so that objects can create and publish messages to the game so they can be consumed by subscribed objects.  Each message generates a time stamp for itself using DateTime.Now.  The demo game has been purposefully set up to create 800 objects each of which send out new messages every frame.</p>
<p style="text-align: justify;">The following screenshots are from the profiler run with the DateTime.Now call still in the code.  This first image shows the CPU usage ratio between the full update and draw processes:</p>
<a href="http://jason-mitchell.com/wp-content/uploads/2012/01/Game.Run_Poor.png"><img class="size-full wp-image-437  alignnone" title="Game.Run_Poor" alt="" src="http://jason-mitchell.com/wp-content/uploads/2012/01/Game.Run_Poor.png" width="715" height="351" /></a>

The following image shows the call to the constructor containing the usage of DateTime.Now.  Note that the usage for the function calling this code (the blue box on the left) is 35.8%.

<a href="http://jason-mitchell.com/wp-content/uploads/2012/01/AttributeChangedMessage.Ctor_Poor1.png"><img class="alignnone size-full wp-image-436" title="AttributeChangedMessage.Ctor_Poor" alt="" src="http://jason-mitchell.com/wp-content/uploads/2012/01/AttributeChangedMessage.Ctor_Poor1.png" width="716" height="348" /></a>

Lastly, this image shows the CPU percentage used for the DateTime.Now call.

<a href="http://jason-mitchell.com/wp-content/uploads/2012/01/Message.Ctor_Poor.png"><img class="alignnone size-full wp-image-438" title="Message.Ctor_Poor" alt="" src="http://jason-mitchell.com/wp-content/uploads/2012/01/Message.Ctor_Poor.png" width="709" height="337" /></a>
<p style="text-align: justify;">I was really quite surprised to see how much CPU time the DateTime.Now call was using.  I then removed the call and ran the CPU profiler to see how the results changed.  The first image is of the Game.Run() call again showing the ratio between the update and draw methods.  Already it's clear that removing the DateTime.Now call has improved things since the CPU usage is split more evenly.</p>
<p style="text-align: justify;"><a href="http://jason-mitchell.com/wp-content/uploads/2012/01/Game.Run_.png"><img class="alignnone size-full wp-image-433" title="Game.Run_Improved" alt="" src="http://jason-mitchell.com/wp-content/uploads/2012/01/Game.Run_.png" width="710" height="340" /></a></p>
<p style="text-align: justify;">The following image shows the call to the constructor which <strong>used to</strong> contain the call to DateTime.Now.  Notice that the usage for the code calling this function has dropped from 35.8% to 0.9% which is a massive change!</p>
<p style="text-align: justify;"><a href="http://jason-mitchell.com/wp-content/uploads/2012/01/AttributeChangedMessage.Ctor_Poor.png"><img class="alignnone size-full wp-image-434" title="AttributeChangedMessage.Ctor_Improved" alt="" src="http://jason-mitchell.com/wp-content/uploads/2012/01/AttributeChangedMessage.Ctor_Poor.png" width="717" height="342" /></a></p>
<p style="text-align: justify;">Because the results of this performance test were so surprising I decided to do a bit of googling around the performance of DateTime.Now and it didn't take very long to find an article confirming that this call is expensive.  The article also states that using DateTime.UtcNow is much faster however I plan on staying away from using DateTime in my game engine.  You can read the article at <a href="http://bit.ly/zTJaaT" target="_blank">http://bit.ly/zTJaaT</a>.</p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>429</wp:post_id>
        <wp:post_date>2012-01-07 20:39:29</wp:post_date>
        <wp:post_date_gmt>2012-01-07 20:39:29</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>xna-and-c-calling-datetime-now-is-expensive</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,xna,performance,datetime,now,expensive]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Calling DateTime.Now in C# is an expensive operation which can hurt the performance of your XNA game]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA and C#: Calling DateTime.Now is Expensive]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[79]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Calling DateTime.Now in C# is an expensive operation which can hurt the performance of your XNA game]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,xna,performance,datetime,now,expensive]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[XNA and C#: Calling DateTime.Now is Expensive]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[xna]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1456840346]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430466885;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:304;}i:1;a:1:{s:2:"id";i:177;}i:2;a:1:{s:2:"id";i:273;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Getting Started With Fluent NHibernate and Auto Mapping in C#</title>
        <link>http://jason-mitchell.com/web-development/getting-started-with-fluent-nhibernate-and-auto-mapping-in-c/</link>
        <pubDate>Sun, 22 Jan 2012 21:10:38 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=457</guid>
        <description></description>
        <content:encoded><![CDATA[<p style="text-align: justify;">I always hear good things about NHibernate and how it is better than alternatives such as Entity Framework so I decided to try it out for myself; not being a fan of large XML configuration files I went the route of using Fluent NHibernate which provides a <a href="http://en.wikipedia.org/wiki/Fluent_interface" target="_blank">fluent interface</a> for configuration purposes.  Even though I've recently become a big fan of ASP.NET MVC 3 I decided to try out NHibernate in an ASP.NET Web Forms application since that's what I work with every day.</p>
<p style="text-align: justify;"><!--more--></p>
<p style="text-align: justify;"><strong>Note: I've provided a download link to my code at the end of this article.</strong></p>
<p style="text-align: justify;">I started out by creating an empty ASP.NET project and added a basic web form which creates a GridView to display some results from the database (which I've included in the App_Data folder).  Next using <a href="http://nuget.org/" target="_blank">NuGet</a> (one of the best tools ever!) I installed the Fluent NHibernate package and all of its dependencies in my web application.</p>
<p style="text-align: justify;">I created the following class to represent a single record from tUser in my application:</p>

<pre lang="csharp" escaped="true">public class User
{
    public virtual int ID { get; set; }
    public virtual string EmailAddress { get; set; }
    public virtual string Password { get; set; }
}</pre>
<p style="text-align: justify;">Note the use of the virtual keyword here.  Without it we would get an NHibernate.InvalidProxyTypeException with an error message similar to:</p>

<blockquote>The following types may not be used as proxies:
WebApplication1.Entities.User: method get_Password should be 'public/protected virtual' or 'protected internal virtual'
WebApplication1.Entities.User: method set_Password should be 'public/protected virtual' or 'protected internal virtual'</blockquote>
<p style="text-align: justify;">The next step was to set up and configure NHibernate for my application.  For database access using NHibernate we need two objects; ISessionFactory and ISession.  The ISessionFactory interface is created during the fluent configuration of NHibernate and allows us to "open" a session by calling mySessionFactory.OpenSession().  This method call returns an instance of ISession which can then be used to create queries, handle transactions and add/remove/update items in the database.</p>
<p style="text-align: justify;">I wanted to only create a single session factory for the entire application and a open a single session per request so I added a Global.asax file to my project in order to take advantage of the Application_Start and Application_BeginRequest events.  This is where I configured my application using the code below:</p>

<pre lang="csharp" escaped="true">public class Global : System.Web.HttpApplication
{
    protected void Application_Start(object sender, EventArgs e)
    {
        Application["NHSessionFactory"] = CreateSessionFactory();
    }

    private static ISessionFactory CreateSessionFactory()
    {
        return Fluently.Configure()
            .Database(MsSqlConfiguration.MsSql2008
                .ConnectionString(ConfigurationManager.AppSettings["ConnectionString"]))
            .Mappings(m =&gt; m.AutoMappings.Add(CreateAutomappings))
            .BuildSessionFactory();
    }

    private static AutoPersistenceModel CreateAutomappings()
    {
        return AutoMap
            .AssemblyOf&lt;AutomappingConfiguration&gt;(new AutomappingConfiguration())
            .Override&lt;User&gt;(u =&gt; u.Table("tUser"));
    }

    protected void Application_BeginRequest(object sender, EventArgs e)
    {
        ISessionFactory sessionFactory = (ISessionFactory) Application["NHSessionFactory"];
        Context.Items["NHSession"] = sessionFactory.OpenSession();
    }

    protected void Application_EndRequest(object sender, EventArgs e)
    {
        ISession session = (ISession) Context.Items["NHSession"];
        session.Dispose();
    }

    protected void Application_End(object sender, EventArgs e)
    {
        ISessionFactory sessionFactory = (ISessionFactory)Application["NHSessionFactory"];
        sessionFactory.Dispose();
    }
}</pre>
<p lang="csharp" style="text-align: justify;">The Application_Start method is responsible for creating my session factory by calling the CreateSessionFactory method and storing it at the application level.  The CreateSessionFactory method sets the connection string and sets up the auto mapping by calling the CreateAutomappings.  This method sets the auto mapping configuration which defines what classes to automatically and overrides the table name that my User class should map to.  The auto mapping configuration provides quite a lot of functionality not covered in this article but you can find some examples of configuration at <a href="http://wiki.fluentnhibernate.org/Auto_mapping">http://wiki.fluentnhibernate.org/Auto_mapping</a>.</p>
<p lang="csharp" style="text-align: justify;">In the Application_BeginRequest method I retrieve the my application's session factory, open a new session and attach it to the current requests context so it can be accessed in my ASP.NET pages:</p>

<pre lang="csharp" escaped="true">protected void Page_Load(object sender, EventArgs e)
{
    ISession session = (ISession) Context.Items["NHSession"];
    CreateUsers(session);

    var users = from u in session.Query&lt;User&gt;()
                select u;

    grdUsers.DataSource = users;
    grdUsers.DataBind();
}

private void CreateUsers(ISession session)
{
    if(session.Query&lt;User&gt;().Count() &lt; 3)
    {
        using(ITransaction transaction = session.BeginTransaction())
        {
            for (int i = 1; i &lt;= 3; i++)
            {
                User user = new User
                {
                    EmailAddress = string.Format("user{0}@test.com", i),
                    Password = "password"
                };
                session.Save(user);
            }

            transaction.Commit();
        }
    }
}</pre>
<p lang="csharp" style="text-align: justify;">The first line of this method retrieves the session from the request context and can then be used to query the database.  The "CreateUsers" method shows a simple insert into the database using a transaction.  This is followed by a really simple Linq expression which queries the database for all of the User records.  I should point out that in order to use Linq expressions for queries I needed add a using statement for the NHibernate.Linq namespace.</p>
<p lang="csharp" style="text-align: justify;">This basic set up of Fluent NHibernate is okay but it could be improved upon so I'm going to write a follow up article on using Fluent NHibernate with dependency injection to improve the structure of the code.  And as promised the download link for the code can be found below; in order to build this project <strong>you will need to have NuGet installed</strong> as I'm using the <a href="http://nuget.org/packages/NuGetPowerTools" target="_blank">NuGetPowerTools</a> package to retrieve all of the required DLLs when the project is built.</p>
<p lang="csharp" style="text-align: justify;"><strong>Download Link:</strong> <a href="http://www.jason-mitchell.com/Uploads/Fluent_NHibernate_Getting_started.zip">http://www.jason-mitchell.com/Uploads/Fluent_NHibernate_Getting_started.zip</a></p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>457</wp:post_id>
        <wp:post_date>2012-01-22 21:10:38</wp:post_date>
        <wp:post_date_gmt>2012-01-22 21:10:38</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>getting-started-with-fluent-nhibernate-and-auto-mapping-in-c</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="data-access"><![CDATA[data access]]></category>
        <category domain="post_tag" nicename="nhibernate"><![CDATA[nhibernate]]></category>
        <category domain="post_tag" nicename="sample"><![CDATA[sample]]></category>
        <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[81]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[fluent nhibernate]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Getting Started With Fluent NHibernate and Auto Mapping in C#]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Quick start guide to getting started with Fluent NHibernate and it's auto mapping functionality in a C# ASP.NET application.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[fluent,nhibernate,c#,asp.net]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[In this article I discuss a basic set up of Fluent NHibernate and auto mapping in a C# ASP.NET application.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Getting Started with Fluent NHibernate and AutoMapping in C#]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[fluent,nhibernate,c#,asp.net]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454337452]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430764105;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:625;}i:1;a:1:{s:2:"id";i:605;}i:2;a:1:{s:2:"id";i:220;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>77</wp:comment_id>
            <wp:comment_author><![CDATA[Chee]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-01-01 23:32:37</wp:comment_date>
            <wp:comment_date_gmt>2013-01-01 23:32:37</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Great example.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1357083157.082624;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1357220289.190443;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>184</wp:comment_id>
            <wp:comment_author><![CDATA[M Venugopal]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-10-22 11:20:00</wp:comment_date>
            <wp:comment_date_gmt>2013-10-22 11:20:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[It is not working. When it suns, it asks for a file Fluently.cs, which was in location d:BuildsFluentNH-v1.x-nh3srcFluentNHibernateCfgFluently.cs]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1091960019]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>185</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-10-22 12:44:00</wp:comment_date>
            <wp:comment_date_gmt>2013-10-22 12:44:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I've just downloaded and tested this and it worked for me.  The only thing I had to do was correct my connection string.  When debugging and you see that dialog asking for Fluently.cs or FluentConfiguration.cs, press cancel and go to the code to see the real exception.  The InnerException property should give you more information about what is wrong.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>184</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1091960019]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1092023188]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Quick Tip: Fixing Incorrectly Sized Bounding Sphere for 3DS Model in XNA</title>
        <link>http://jason-mitchell.com/quick-tip/quick-tip-fixing-incorrectly-sized-bounding-sphere-for-3ds-model-in-xna/</link>
        <pubDate>Mon, 23 Jan 2012 12:00:47 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=478</guid>
        <description></description>
        <content:encoded><![CDATA[<p style="text-align: justify;">Recently I've been spending a lot of time working on a 3D game engine using XNA and wanted to implement some model measuring functionality.  I noticed that my measurements weren't coming out quite right so with the help of the App Hub's <a href="http://create.msdn.com/en-US/education/catalog/sample/shape_rendering" target="_blank">shape renderer sample</a> I was able to visualise the bounding sphere for the model and noticed it was significantly smaller than my model.  After some poking around and googling I discovered that <strong>I needed to set the units in my install of 3DS Max to be centimeters</strong> - once this was done and I exported my model again the bounding spheres were correctly sized and my model measurements were returning the correct results!</p>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>478</wp:post_id>
        <wp:post_date>2012-01-23 12:00:47</wp:post_date>
        <wp:post_date_gmt>2012-01-23 12:00:47</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>quick-tip-fixing-incorrectly-sized-bounding-sphere-for-3ds-model-in-xna</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="3d-graphics"><![CDATA[3D Graphics]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="quick-tip"><![CDATA[Quick Tip]]></category>
        <category domain="post_tag" nicename="quick-tip-2"><![CDATA[quick tip]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[59]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[Incorrectly Sized Bounding Sphere]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Fixing Incorrectly Sized Bounding Sphere for 3DS Model in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[This post aims to help with fixing an incorrectly sized bounding sphere for a 3DS Model in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[bounding,sphere,xna,model,measure,3ds]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[If your models XNA bounding sphere is smaller than the visible model itself when exported from 3DS you may need to change your 3DS units to centimeters.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Quick Tip: Fixing Incorrectly Sized Bounding Sphere for 3DS Model in XNA]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[bounding,sphere,xna,model,measure,3ds]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1469199953]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429797288;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:71;}i:1;a:1:{s:2:"id";i:99;}i:2;a:1:{s:2:"id";i:270;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Theme Aware Panorama Control for Windows Phone</title>
        <link>http://jason-mitchell.com/mobile-dev/theme-aware-panorama-control-for-windows-phone/</link>
        <pubDate>Fri, 25 May 2012 16:58:57 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=526</guid>
        <description></description>
        <content:encoded><![CDATA[For the Windows Phone app that I've been working on recently I want to make sure that it has good support for both the light and dark themes on Windows Phone.  This is pretty easy to achieve in most places by binding styles to the built-in resources but I found myself needing to change the background image of a panorama control.

<!--more-->

A quick search found <a href="http://blog.jayway.com/2010/12/16/theme-aware-panorama-background-in-windows-phone-7/" target="_blank">this article</a> which uses the ViewModel to determine the background image to be used.  I don't feel like this is the right place to implement this as it is really something that should be accomplished through XAML along with the rest of the UI.  What I decided to do was extend the Panorama control with my own ThemeAwarePanorama control.

First I set up a basic UIHelper class to help me determine if the light theme is active:

[gist file="UIHelper.cs"]https://gist.github.com/jasonmitchell/4462646[/gist]

Next I added a new class to my project called ThemeAwarePanorama:

[gist file="ThemeAwarePanorama.cs"]https://gist.github.com/jasonmitchell/4462646[/gist]

All that was left then was to create this control in my XAML:

[gist file="UIHelper.cs"]https://gist.github.com/jasonmitchell/4462646[/gist]

And now my background image will switch based on my phone's theme.  Better yet is that this also works in Expression Blend so I can easily toggle the theme within it and preview the styles without needing to start up the emulator.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>526</wp:post_id>
        <wp:post_date>2012-05-25 16:58:57</wp:post_date>
        <wp:post_date_gmt>2012-05-25 16:58:57</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>theme-aware-panorama-control-for-windows-phone</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="mobile-dev"><![CDATA[Mobile Development]]></category>
        <category domain="post_tag" nicename="silverlight-2"><![CDATA[silverlight]]></category>
        <category domain="post_tag" nicename="windows-phone-2"><![CDATA[windows phone]]></category>
        <category domain="post_tag" nicename="wp"><![CDATA[wp]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_tweet_this</wp:meta_key>
            <wp:meta_value><![CDATA[yes]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_clig</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_bitly</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_wp</wp:meta_key>
            <wp:meta_value><![CDATA[http://jason-mitchell.com/c/theme-aware-panorama-control-for-windows-phone/]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_yourls</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_url</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_jd_target</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_wp_twitter</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{i:0;s:132:"New post: Theme Aware Panorama Control for Windows Phone http://jason-mitchell.com/c/theme-aware-panorama-control-for-windows-phone/";}]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
            <wp:meta_value><![CDATA[true]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[windows,phone,theme,aware,panorama,control]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Creating a custom theme aware panorama control for Windows Phone ]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Theme Aware Panorama Control for Windows Phone]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[75]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Creating a custom theme aware panorama control for Windows Phone]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[windows,phone,theme,aware,panorama,control]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Theme Aware Panorama Control for Windows Phone]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[windows phone]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338355]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430533113;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:946;}i:1;a:1:{s:2:"id";i:407;}i:2;a:1:{s:2:"id";i:887;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>65</wp:comment_id>
            <wp:comment_author><![CDATA[Joel Santos]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2012-08-18 00:27:45</wp:comment_date>
            <wp:comment_date_gmt>2012-08-18 00:27:45</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Amazing work =)]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1345249665.5408";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1345796896.5917";s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Use of SPContext.Current in SharePoint Code</title>
        <link>http://jason-mitchell.com/web-development/use-of-spcontext-current-in-sharepoint-code/</link>
        <pubDate>Sat, 06 Apr 2013 15:35:03 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=561</guid>
        <description></description>
        <content:encoded><![CDATA[First off, there's nothing wrong with using SPContext.Current; this article is about using it correctly and structuring your code to work with it in a flexible way.

I worked on a fairly long running SharePoint project which liberally used SPContext.Current to access the SPWeb instance everywhere; it popped up not only in WebPart code but also <span style="text-decoration: underline;"><em><strong>business logic classes</strong></em></span>.  It's perfectly acceptable to use SPContext.Current in your WebPart code-behind files because the context will be available in these places, however problems arise when your business logic classes make use of this singleton under the assumption that they will only ever be used in WebParts.  The moment you want to use these business logic classes anywhere else (think event receivers) things fall apart and you get exceptions when the code is called.

<!--more-->
<h3>Imagine this scenario...</h3>
We create a new simple event receiver and in the interest of remaining <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" target="_blank">DRY</a> we decide to reuse our existing business logic classes to do some stuff (said classes use SPContext.Current liberally).  We finish writing our code and give ourselves a pat on the back for a job well done.  Confident that our use of mature and established code will pretty much guarantee that the event receiver will work with minimum problems we deploy it only to find that it doesn't work.
<h3>The problem...</h3>
In an event receiver SPContext.Current will always be null and rightly so, the expectation in this case is that you should access the SPWeb object using the SPItemEventProperties object.  Therefore any of our established business logic methods used in the event receiver will fail since we cannot get the static context.
<h3>The real problem...</h3>
In my opinion the real problem here is lack of a flexible code structure; in the scenario the developer tried to be good and write reusable code but it wasn't written flexibly.  By embedding calls to SPContext.Current we are always forcing that method to run under the current site context.  As mentioned above our event receiver failed because of this but it also limits what we can do with the code even when it is used from a WebPart and SPContext.Current is not null.  Perhaps we want to use one of our methods in a block of code running with elevated privileges?  This could potentially give funny results as our business method will not be using the elevated SPWeb object that we probably want it to use.
<h3>The solution...</h3>
Solving this is pretty straightforward.  All we have to do is pass in the SPWeb object as a parameter to the methods that need it and remove our embedded calls to SPContext.Current, this way we give control of the context to the caller and remove that responsibility from the business class.

Is this more verbose?  Yes.  Is this more typing for developers?  Definitely.  Is this a more flexible way to implement business logic in SharePoint? Absolutely!]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>561</wp:post_id>
        <wp:post_date>2013-04-06 15:35:03</wp:post_date>
        <wp:post_date_gmt>2013-04-06 15:35:03</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>use-of-spcontext-current-in-sharepoint-code</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="sharepoint"><![CDATA[sharepoint]]></category>
        <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[SPContext.Current]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Using SPContext.Current in logic classes in a SharePoint project can pose problems when using these classes in Event Receivers & other areas of code]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1457588583]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430717759;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:407;}i:1;a:1:{s:2:"id";i:715;}i:2;a:1:{s:2:"id";i:723;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Date Picker for C# &amp; XAML Windows Store Apps</title>
        <link>http://jason-mitchell.com/software-development/datepicker-for-c-xaml-windows-store-apps/</link>
        <pubDate>Sun, 13 Jan 2013 22:01:06 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=584</guid>
        <description></description>
        <content:encoded><![CDATA[I found myself needing a date picker in the C# and XAML Windows Store app that I'm currently working on.  To my disappointment I found this control was available in the default controls for HTML and JS apps but not XAML.   I love XAML because it's immensely powerful and flexible and I love being able to use it to develop apps for Windows 8 but the lack of equality in terms of availability of commonly required controls frustrates the crap out of me.
<h4><span style="color: #339966;"><em><strong>Update:</strong> I've set up my own NuGet package for this control so I can ensure it's kept it up to date with the latest build.  You can find it at: <a href="https://nuget.org/packages/WinRT-DatePicker/">https://nuget.org/packages/WinRT-DatePicker/</a></em></span></h4>
<!--more-->

This isn't a problem of just differences between project types but there are some core controls missing in all of them; for example the calendar control is missing from both XAML and HTML projects (although I imagine any number of existing JS libraries for calendars should work in HTML apps).  There are some great tools out there to help developers fill in the missing pieces like Telerik's <a href="http://www.telerik.com/products/windows-8/overview.aspx" target="_blank">RadControls for Windows 8</a> and ComponentOne's <a href="http://www.componentone.com/SuperProducts/Windows8/" target="_blank">Studio for WinJS/WinRT XAML</a> but frankly the pricing of such toolkits for an independent developer borderlines on absurd.

Luckily there are some awesome open source projects such as the <a href="http://winrtxamltoolkit.codeplex.com/" target="_blank">WinRT XAML Toolkit</a> out there to help fill in the pieces while we wait to see if Microsoft will ever give us these tools out of the box.  Unfortunately the WinRT XAML Toolkit doesn't yet provide a date picker control so I created a simple one to fit my needs and put it on GitHub at <a href="https://github.com/jasonmitchell/WinRT-XAML-DatePicker">https://github.com/jasonmitchell/WinRT-XAML-DatePicker</a>.  It doesn't cover every possible scenario but it should fit basic needs.  Hopefully it helps someone out there.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>584</wp:post_id>
        <wp:post_date>2013-01-13 22:01:06</wp:post_date>
        <wp:post_date_gmt>2013-01-13 22:01:06</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>datepicker-for-c-xaml-windows-store-apps</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <category domain="post_tag" nicename="windows-8-2"><![CDATA[windows 8]]></category>
        <category domain="post_tag" nicename="xaml"><![CDATA[xaml]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[73]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[date picker]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[DatePicker for C# & XAML Windows Store Apps]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[For a Windows Store app I was working on recently I found myself needing a date picker, I soon discovered there was no XAML control so I made my own.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,xaml,windows 8,windows,store,app,datepicker,winrt]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Disappointed by the absence of a DatePicker control in C# and XAML for Windows Store Apps I created my own basic control and put it on GitHub.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[DatePicker for C# & XAML Windows Store Apps]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[c#,xaml,windows 8,windows,store,app,datepicker,winrt]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338360]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430759678;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:526;}i:1;a:1:{s:2:"id";i:136;}i:2;a:1:{s:2:"id";i:89;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>83</wp:comment_id>
            <wp:comment_author><![CDATA[Rakesh]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-01-30 21:05:26</wp:comment_date>
            <wp:comment_date_gmt>2013-01-30 21:05:26</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you for sharing this. Such functionality is expected to be built-in but unfortunately developers like us keep struggling to develop it.

I have downloaded the solution and works perfectly individually, but when I tried to use it in my current project it shows error in CreateBinding function
for line:
<code>
DayOptions.SetBinding(ItemsControl.ItemsSourceProperty, dayOptionsBinding);
</code>
Error: <b>Object reference not set to an instance of an object.</b>

I have used same file and used same XAML structure as in your example.

Can you please help me?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359579926.2224121;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360400851.8254769;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>86</wp:comment_id>
            <wp:comment_author><![CDATA[jmitch18]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-02-09 09:19:53</wp:comment_date>
            <wp:comment_date_gmt>2013-02-09 09:19:53</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sorry for the delay in replying.

Do you know which object is null in that line?  I'm guessing it's the DayOptions property that is returning null; I've been able to reproduce this by renaming the DayOptions ComboBox in Generic.xaml so it can't be found by the code in DatePicker.cs.  If that's not the problem then if you had a sample reproducing the problem I could take a look.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>83</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360401593.366914;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>93</wp:comment_id>
            <wp:comment_author><![CDATA[Farhan]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-11 13:12:25</wp:comment_date>
            <wp:comment_date_gmt>2013-03-11 13:12:25</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks Jason, here is NuGet package. https://nuget.org/packages/WinRTDatePicker]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363007545.3975539;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363029374.1813879;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>94</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-11 19:16:40</wp:comment_date>
            <wp:comment_date_gmt>2013-03-11 19:16:40</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Amazing!! Good work]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>93</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363029400.0988691;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>95</wp:comment_id>
            <wp:comment_author><![CDATA[Alexander]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://23snap.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-12 11:29:00</wp:comment_date>
            <wp:comment_date_gmt>2013-03-12 11:29:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Jason,

I like your date picker control very much, but couldn't figure out why setting a new date in an async method (after a button is clicked) doesn't work. If I set a new date in the constructor of the page, it works fine.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363087740.319289;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363101364.422992;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>96</wp:comment_id>
            <wp:comment_author><![CDATA[Alexander]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://23snap.com</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-12 12:31:06</wp:comment_date>
            <wp:comment_date_gmt>2013-03-12 12:31:06</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Some additional info: it doesn't work even in a standard event handler like this:

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            datePicker.SelectedDate = new DateTime(2000, 11, 30);
        }]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363091466.138135;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363101368.57042;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>97</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-12 15:23:19</wp:comment_date>
            <wp:comment_date_gmt>2013-03-12 15:23:19</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[That's interesting.  I've only used it with data binding myself so I didn't see this.  If you could create a new issue at <a href="https://github.com/jasonmitchell/WinRT-XAML-DatePicker" rel="nofollow">https://github.com/jasonmitchell/WinRT-XAML-DatePicker</a> I will hopefully get round to looking at this.  Alternatively if you have a fix for the issue I will accept pull requests on the project.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>96</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363101799.861665;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>98</wp:comment_id>
            <wp:comment_author><![CDATA[Vince]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-19 15:04:49</wp:comment_date>
            <wp:comment_date_gmt>2013-03-19 15:04:49</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi, i have used your datepicker in a project of mine and it works good, I've used it in a MVVM-Light project and i Databinded on the Selected date.
I need to use two datepickers in my project, i initialize them by setting the corresponding DateTime Property to DateTime.Now.
The problem is that the date of the second Datepicker may not be lower/earlier than the date of the first datepicker.

I've already tried to set the DateTime of the second DatePicker to the datetime of the first datepicker in the PropertyChanged of the second datepicker.
The property itself changes but the datepicker doesn't, even though it has two way binding.

Do you maybe know how i can resolve this problem.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363705489.7775121;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363720394.7550581;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>99</wp:comment_id>
            <wp:comment_author><![CDATA[Matt]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-19 18:50:50</wp:comment_date>
            <wp:comment_date_gmt>2013-03-19 18:50:50</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I can't get 2 way binding to work. I'm binding selected day. But whenever the selected day changes in the model the view doesn't update. Did you have this problem?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363719050.855464;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363720406.1960881;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>100</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-19 19:29:45</wp:comment_date>
            <wp:comment_date_gmt>2013-03-19 19:29:45</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[I've managed to reproduce this.  I've created a new issue on GitHub for it

<a href="https://github.com/jasonmitchell/WinRT-XAML-DatePicker/issues/1" rel="nofollow">https://github.com/jasonmitchell/WinRT-XAML-DatePicker/issues/1</a>]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>99</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363721385.297085;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>101</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-19 19:30:30</wp:comment_date>
            <wp:comment_date_gmt>2013-03-19 19:30:30</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Sounds like the same issue as Matt is having below.  I've created a new issue on GitHub for it

<a href="https://github.com/jasonmitchell/WinRT-XAML-DatePicker/issues/1" rel="nofollow">https://github.com/jasonmitchell/WinRT-XAML-DatePicker/issues/1</a>]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>98</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363721430.350039;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>102</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-19 20:22:15</wp:comment_date>
            <wp:comment_date_gmt>2013-03-19 20:22:15</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[These problems should be fixed now.  You can get the updates at <a href="https://github.com/jasonmitchell/WinRT-XAML-DatePicker/blob/master/Src/WinRTDatePicker/DatePicker.cs" rel="nofollow">https://github.com/jasonmitchell/WinRT-XAML-DatePicker/blob/master/Src/WinRTDatePicker/DatePicker.cs</a>]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363724535.9904799;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>103</wp:comment_id>
            <wp:comment_author><![CDATA[Vince]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-20 07:41:15</wp:comment_date>
            <wp:comment_date_gmt>2013-03-20 07:41:15</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi, thanks for the fix. Ive installed the datepicker from a Nuget Package. How can i update the package with your version on Github? I'm not very familliar with it.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>102</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363765275.331254;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>104</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-20 08:59:32</wp:comment_date>
            <wp:comment_date_gmt>2013-03-20 08:59:32</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Ah right.  I don't personally control that NuGet package so the fix won't show up in there until the owner updates it.

I think you could just replace the contents of the DatePicker class on github <a href="https://raw.github.com/jasonmitchell/WinRT-XAML-DatePicker/master/Src/WinRTDatePicker/DatePicker.cs" rel="nofollow">https://raw.github.com/jasonmitchell/WinRT-XAML-DatePicker/master/Src/WinRTDatePicker/DatePicker.cs</a>]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>103</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363769972.7017479;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>105</wp:comment_id>
            <wp:comment_author><![CDATA[Vince]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-20 09:51:34</wp:comment_date>
            <wp:comment_date_gmt>2013-03-20 09:51:34</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks, it's working now :)]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>104</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363773094.6144831;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>106</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-03-20 11:47:48</wp:comment_date>
            <wp:comment_date_gmt>2013-03-20 11:47:48</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Awesome, it was caused pretty major oversight on my part.  I basically built what I needed and left it there.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>105</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1363780068.409255;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>167</wp:comment_id>
            <wp:comment_author><![CDATA[antti kajanus]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://kajanus.net</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-04-20 06:57:27</wp:comment_date>
            <wp:comment_date_gmt>2013-04-20 06:57:27</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Nice work Jason, saves quite a lot of my time.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366441047.971417;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366574728.6278379;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>168</wp:comment_id>
            <wp:comment_author><![CDATA[Raj]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-06-27 05:39:34</wp:comment_date>
            <wp:comment_date_gmt>2013-06-27 05:39:34</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Jason, great work. I would like to leave date picker empty and let the user select the date. Picker automatically selects a date when it loads.How do I make it empty when it loads?Great job once again.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372311574.0448749;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372405523.8104999;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>169</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-06-28 07:45:56</wp:comment_date>
            <wp:comment_date_gmt>2013-06-28 07:45:56</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks.  I don't think I have included support for that but it sounds like something that should really be in there.  I've opened a GitHub issue at https://github.com/jasonmitchell/WinRT-XAML-DatePicker/issues/12

I will have a think about potential workarounds which may help you until the update is done.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>168</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372405556.0604999;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>179</wp:comment_id>
            <wp:comment_author><![CDATA[Marcin]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-07-31 07:12:00</wp:comment_date>
            <wp:comment_date_gmt>2013-07-31 07:12:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Nice work, but how to localize your control?]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[982322485]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>180</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-07-31 10:09:00</wp:comment_date>
            <wp:comment_date_gmt>2013-07-31 10:09:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thanks Marcin.  Unfortunately I haven't made any explicit effort to make the control localizable (that's a pretty big job to cover all cases).  It may be possible to get some localization of month names for the Georgian calendar based on device language packs since it just uses DateTime.ToString(...).  However it doesn't support dynamically arranging inputs for different cultures (e.g. mm/dd/yyyy instead of dd/mm/yyyy).
It's not something I intend to add myself due to time constraints however I will most certainly accept pull requests for it.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>179</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[982322485]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[982405467]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>194</wp:comment_id>
            <wp:comment_author><![CDATA[Shefali]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-12-03 11:34:00</wp:comment_date>
            <wp:comment_date_gmt>2013-12-03 11:34:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Can this control be included in windows store apps ? sorry to ask .. i'm just really new !]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1148523826]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>195</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-12-03 13:03:00</wp:comment_date>
            <wp:comment_date_gmt>2013-12-03 13:03:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Yup, feel free to use it in your apps.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>194</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1148523826]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1148646261]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>515</wp:comment_id>
            <wp:comment_author><![CDATA[Rohit]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-07-08 10:55:00</wp:comment_date>
            <wp:comment_date_gmt>2014-07-08 10:55:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Thank you; this really helped me today!]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404816900.707;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404908259.05075;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>30932</wp:comment_id>
            <wp:comment_author><![CDATA[Purushotham B]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-11-24 07:13:00</wp:comment_date>
            <wp:comment_date_gmt>2014-11-24 07:13:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Jason, How to add more years for this control. As I'm getting this for only 20 years for now.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1709416316]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>30990</wp:comment_id>
            <wp:comment_author><![CDATA[Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-11-24 22:20:00</wp:comment_date>
            <wp:comment_date_gmt>2014-11-24 22:20:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi

It's been a while since I did anything with this control so I could be wrong; I think you need to set up a data binding for the YearOptions.  If you are targeting Windows 8.1 I would recommend using Microsoft's DatePicker (http://msdn.microsoft.com/en-gb/library/windows/apps/xaml/windows.ui.xaml.controls.datepicker.aspx) over this. I create this control when the original Windows 8 came out because there was no C#/XAML DatePicker - Microsoft's implementation will be better and more complete than mine.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>30932</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1709416316]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1710728562]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Using WinMerge with Git in Windows</title>
        <link>http://jason-mitchell.com/developer-tools/using-winmerge-with-git-in-windows/</link>
        <pubDate>Tue, 26 Feb 2013 20:40:44 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=595</guid>
        <description></description>
        <content:encoded><![CDATA[Recently I've started using Git as my main source control system after several months of very vocally complaining about it.  I liked the idea of Git and distributed source control in theory but my limited practical experiences had been full of difficulties.  I figured this was simply due to me not really knowing how to work with it; turned out I was right.  After learning the basics I started to really enjoy using Git, so I decided to move a couple of my projects from SVN to Git and have never looked back since!  Now all my code is in Git.

<!--more-->

My one major gripe with using Git was the lack of an integrated visual diff tool; I just couldn't make sense of the git bash diff output.  A little bit of Googling found some StackOverflow questions that roughly pointed me in the right direction but didn't quite get things working for me.  In the end I toyed around with the settings in my .gitconfig file and came up with the following configuration which works for me:
<pre>[user]
    name = Jason Mitchell
    email = &lt;email address&gt;
[core]
    autocrlf = true
    editor = notepad.exe
[diff]
    tool = winmerge
[difftool "winmerge"]
    cmd = winmergeu.exe -e -ub -x -wl -u -maximise -dl "base" -dr "mine" \"$LOCAL\" \"$REMOTE\"
[difftool]
    prompt = false
[push]
    default = simple</pre>
Now I could happily use the Git difftool command and would get my diffs presented for me in the WinMerge GUI.  Note: the above config requires WinMerge to be added to your PATH environment variable.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>595</wp:post_id>
        <wp:post_date>2013-02-26 20:40:44</wp:post_date>
        <wp:post_date_gmt>2013-02-26 20:40:44</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>using-winmerge-with-git-in-windows</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="developer-tools"><![CDATA[Developer Tools]]></category>
        <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
        <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[git,winmerge,windows,gitconfig]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[How to setup your .gitconfig file to use WinMerge with Git on Windows]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Using WinMerge with Git in Windows]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[79]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[How to setup your .gitconfig file to use WinMerge with Git on Windows]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[git,winmerge,windows,gitconfig]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Using WinMerge with Git in Windows]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[git]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1456781467]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430780597;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:155;}i:1;a:1:{s:2:"id";i:89;}i:2;a:1:{s:2:"id";i:584;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>265</wp:comment_id>
            <wp:comment_author><![CDATA[Giovana Guadalupe]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-06-20 01:31:00</wp:comment_date>
            <wp:comment_date_gmt>2014-06-20 01:31:00</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[It works for me! thanks]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>dsq_parent_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>dsq_post_id</wp:meta_key>
                <wp:meta_value><![CDATA[1444942350]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Using T4 Templates to Remove String References to ASP.NET MVC Actions</title>
        <link>http://jason-mitchell.com/web-development/t4-templates-to-generate-code-for-asp-net-mvc-actions/</link>
        <pubDate>Sat, 02 Mar 2013 13:08:26 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=605</guid>
        <description></description>
        <content:encoded><![CDATA[<span id="edit-slug-buttons"><span style="color: #333333;">Ever since I started working with ASP.NET MVC there has been one thing that has bugged me a little bit; needing to reference my strongly-typed Controllers and Action methods by their string names.  It's not a major problem for me but last night I decided to have a go at solving the problem for a project I'm currently working on.  There are the obvious simple solutions such as manually creating string constants or HtmlHelper and UrlHelper extension methods.  In the past I have used the extension method approach but frankly it's a real pain to maintain going forward with updating names, removing methods, adding new methods etc.  In my opinion developers shouldn't have to worry themselves with this kind of work when we can leave it up to the IDE (Visual Studio 2012 in this case) to do this monotonous work for us.</span></span>

Thanks to Visual Studio tooling and C# language features such as reflection and extension methods I have created a basic solution that <strong><em>suffices for my project.</em></strong><em>  </em>Note emphasised text; there is a possibility this solution may not meet your needs.  I am not trying to create a comprehensive copy-and-paste solution for this article, just sharing my work so far.

<!--more-->

The basic concept behind my solution is to use reflection to inspect my controllers, grab their methods and generate HtmlHelper and UrlHelper extension methods for each action.    I'm not really going to deep-dive into T4 templates or reflection, just putting this content online.  For anyone who hasn't used T4 before and wants to try this template, you can add a new Text Template file using Visual Studios "Add New Item" dialog.  It will create a nested file under the .tt which gets updated when you save a valid template.
<h2>The T4 Template</h2>
[gist file="ActionExtensions.tt"]https://gist.github.com/jasonmitchell/5070743[/gist]
<h2>What it does</h2>
This code gets an array of the Types in the Controllers namespace of my main assembly.  It then gets all the public instance methods defined within this class and uses a LINQ expression to project the MethodInfo objects into a format that is more useful for me.  At the minute it <em>explicitly ignores </em>methods (for now) marked with the HttpPostAttribute; the only reason for this is to let me focus on solving the basic problem first before working on a more comprehensive solution.  The template will also respect the use of the ActionNameAttribute so the extension methods will actually point to the correct place.

It then creates several HtmlHelper and UrlHelper overloads for each action.  These overloads allow us to optionally pass through parameters such as route values and html attributes.
<h2>What it does NOT do</h2>
As mention above the template does not yet handle actions decorated with the HttpPostAttribute.  It also does not create extension methods for BeginForm in HtmlHelper.  It also does not account for strongly typed action parameters.  I'm sure there are lots more things that this template doesn't do.
<h2>What's next?</h2>
<ul>
    <li>Creating BeginForm extension methods and allowing post actions</li>
    <li>Adding extension method with strongly typed action parameters</li>
    <li>Automatically outputting string constants of controller and action names for flexibility</li>
    <li>Better naming convention for generated code ("&lt;ControllerName&gt;&lt;ActionName&gt;ActionLink" is ugly)</li>
    <li>Template to generate javascript file defining relative action URLs</li>
    <li>Anything else?</li>
</ul>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>605</wp:post_id>
        <wp:post_date>2013-03-02 13:08:26</wp:post_date>
        <wp:post_date_gmt>2013-03-02 13:08:26</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>t4-templates-to-generate-code-for-asp-net-mvc-actions</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
        <category domain="post_tag" nicename="code-generation"><![CDATA[Code Generation]]></category>
        <category domain="post_tag" nicename="t4"><![CDATA[T4]]></category>
        <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[t4,code generation,asp.net,mvc,htmlhelper,urlhelper]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Using T4 code generation templates to remove string references to ASP.NET MVC actions by creating extension methods for HtmlHelper and UrlHelper]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Using T4 Templates to Remove String References to ASP.NET MVC Actions]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[81]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Using T4 Templates for code generation to remove string references to ASP.NET MVC actions by creating extension methods for HtmlHelper and UrlHelper]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[t4,code generation,asp.net,mvc,htmlhelper,urlhelper]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Using T4 Templates to Remove String References to ASP.NET MVC Actions]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[t4 template]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_old_slug</wp:meta_key>
            <wp:meta_value><![CDATA[t4-templating-to-generate-code-for-asp-net-mvc-actions]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454338358]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430706850;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:923;}i:1;a:1:{s:2:"id";i:887;}i:2;a:1:{s:2:"id";i:946;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>165</wp:comment_id>
            <wp:comment_author><![CDATA[Sebastian]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-04-11 11:04:29</wp:comment_date>
            <wp:comment_date_gmt>2013-04-11 11:04:29</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi!,

I don´t think this is a good approach, in theory you are using a template to generate information based on a dll (the webproject dll) in order to use it again on the same dll on views and controllers.

In this case you are creating a circular reference because if your webproject dll for some reason does not compile you won´t be able to regenerate your template in case you changed it during the broken project "period" (because the dll won´t be there) and this then causes the webproject to not compile never again because it will try to use the constants generates by the template that now is not working.

Is this analysis correct? Have you reached this scenario?

I am still trying to come up with a solution for this but it is messy to say the least!

Regards,

Sebastian]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365678269.383369;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365686817.7716401;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>166</wp:comment_id>
            <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-04-11 13:36:51</wp:comment_date>
            <wp:comment_date_gmt>2013-04-11 13:36:51</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[Hi Sebastian,

Yeah I've seen this problem with having the circular reference before and it's definitely a bit of a sticking point.  I'm currently using this template in a small project of mine and have seen it before.  The templates are only run when we explicitly run the custom tool, it sucks to have this manual step in there but it means I can clean out the generated .cs file.

You could potentially add a line to the template which checks for the existence of the DLL before it tries to generate the code.  Once this check is in place it should be possible to generate an empty file with a comment or some notification inside when the DLL isn't there?  It's not ideal but it may do the trick.

I think a bit of work is needed to ensure that this template will fail gracefully in order to avoid this problem.]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>165</wp:comment_parent>
            <wp:comment_user_id>1</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365687411.0659561;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Force ASP.NET MVC 4 URLs To Lowercase</title>
        <link>http://jason-mitchell.com/quick-tip/force-asp-net-mvc4-urls-to-lowercase/</link>
        <pubDate>Sat, 02 Mar 2013 17:09:02 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=622</guid>
        <description></description>
        <content:encoded><![CDATA[This afternoon while working on an ASP.NET MVC 4 project I wanted to look into a way to force all of my route URLs to be lowercase.  After a quick bit of searching online I found that .NET 4.5 introduces a new property to the RouteCollection class which forces all URLs to lower case.  Find out more at: <a href="http://msdn.microsoft.com/en-us/library/system.web.routing.routecollection.lowercaseurls.aspx">http://msdn.microsoft.com/en-us/library/system.web.routing.routecollection.lowercaseurls.aspx</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>622</wp:post_id>
        <wp:post_date>2013-03-02 17:09:02</wp:post_date>
        <wp:post_date_gmt>2013-03-02 17:09:02</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>force-asp-net-mvc4-urls-to-lowercase</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
        <category domain="category" nicename="quick-tip"><![CDATA[Quick Tip]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[49]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[asp.net mvc 4]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[Force ASP.NET MVC4 URLs To Lowercase]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[While working on an ASP.NET MVC 4 project I wanted to force all my routes to have lowercase URLs; it turns out .NET 4.5 introduces a way to force this!]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[asp.net,mvc,url,route,lowercase]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Force ASP.NET MVC4 URLs to lowercase for all routes]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[Force ASP.NET MVC4 URLs To Lowercase ]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[asp.net,mvc,url,route,lowercase]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454805640]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430424368;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:887;}i:1;a:1:{s:2:"id";i:946;}i:2;a:1:{s:2:"id";i:605;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>In-Memory Database Using Fluent NHibernate</title>
        <link>http://jason-mitchell.com/software-development/in-memory-database-using-fluent-nhibernate/</link>
        <pubDate>Mon, 04 Mar 2013 10:08:54 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=625</guid>
        <description></description>
        <content:encoded><![CDATA[When writing unit tests dealing with code that communicates with the database can be a pain.  All the information on Test Driven Development on the internet and in books always recommends that you avoid hitting the database.  Avoiding interacting with the database naturally has positive performance implications and has the additional advantage of not cluttering up a test database with a bunch of data created in our unit tests.  I've found that this lets me simplify my unit tests because I can make certain assumptions about the state of my data. There are different ways of avoiding interacting with a database but the two ways I have used are:
<ul>
    <li> Implement the Repository pattern and mock out the interfaces</li>
    <li>Use an in-memory database</li>
</ul>
<!--more--> Fluent NHibernate makes it fairly simple to set up an in-memory database using your mapping files and SQLite.  First your project will need to be configured to include the SQLite interop DLLs which can be done using a NuGet package(<a href="http://nuget.org/packages/System.Data.SQLite/">http://nuget.org/packages/System.Data.SQLite/</a>). The following code is what I use to create an in-memory database for my unit tests.  This code will create a fresh database for each of our tests so it will ensure they all run in isolation.
<h3>InMemorySessionFactoryProvider.cs</h3>
This class is responsible for creating my ISessionFactory and ISession instances.  It's implemented as a singleton so I can easily access a single ISessionFactory instance anywhere I need it.  The CreateSessionFactory method configures a single ISessionFactory instance to use SQLite, adds the mappings from my main project and provides access to the database configuration object.  The OpenSession method will create a new ISession instance and create a new database for it to use.

[gist file="InMemorySessionFactoryProvider.cs"]https://gist.github.com/jasonmitchell/5073089[/gist]
<h3>TestSetupFixture.cs</h3>
TestSetupFixture is configured as a NUnit setup fixture which will execute it's setup and teardown methods once for any test run no matter how many tests are being executed.

[gist file="TestSetupFixture.cs"]https://gist.github.com/jasonmitchell/5073089[/gist]
<h3>AbstractInMemoryDataFixture.cs</h3>
This class only exists to automatically open a new session for each test and dispose of it afterwards.  All my fixtures which require data access inherit from this class.

[gist file="AbstractInMemoryDataFixture.cs"]https://gist.github.com/jasonmitchell/5073089[/gist]

In my opinion this approach is fairly simple and helps to make unit testing a bit simpler.  I also no longer like using the Repository pattern (which I plan to write about soon) so this provides a nice way of avoiding touching the database without mocking objects.]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>625</wp:post_id>
        <wp:post_date>2013-03-04 10:08:54</wp:post_date>
        <wp:post_date_gmt>2013-03-04 10:08:54</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>in-memory-database-using-fluent-nhibernate</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="data-access"><![CDATA[data access]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[80]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[in-memory]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_title</wp:meta_key>
            <wp:meta_value><![CDATA[In-Memory Database Using Fluent NHibernate]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[In this post I show how to use NHibernate to create an in-memory database in unit tests which allows us to avoid slow disk operations to maximise speed.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_keywords</wp:meta_key>
            <wp:meta_value><![CDATA[in-memory,database,unit,tests,nhibernate,tdd,sqlite]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_description</wp:meta_key>
            <wp:meta_value><![CDATA[Using an in-memory SQLite database with Fluent NHibernate for unit testing.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_title</wp:meta_key>
            <wp:meta_value><![CDATA[In-Memory Database Using Fluent NHibernate]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
            <wp:meta_value><![CDATA[in-memory,database,unit,tests,nhibernate,tdd,sqlite]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1454383890]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430770395;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:457;}i:1;a:1:{s:2:"id";i:378;}i:2;a:1:{s:2:"id";i:715;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Supernova Particle System for MonoGame</title>
        <link>http://jason-mitchell.com/game-development/supernova-particle-system-for-monogame/</link>
        <pubDate>Thu, 11 Apr 2013 18:59:26 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=684</guid>
        <description></description>
        <content:encoded><![CDATA[Version 1.0 of Supernova Particle System for MonoGame now available!  Supernova makes it easy to setup particle effects in your games developed using MonoGame.  It was ported to run on MonoGame from my original XNA particle system on <a href="http://microstar.codeplex.com/" target="_blank">CodePlex</a>.

This build initially targets Windows 8 and 2D game development only.  Further support for other platforms and 3D particle effects to come.

Now available on NuGet: <a href="https://nuget.org/packages/Supernova-Particle-System/">https://nuget.org/packages/Supernova-Particle-System/</a>
Source code available at: <a href="https://github.com/jasonmitchell/supernova">https://github.com/jasonmitchell/supernova</a>

<em>See <a href="http://jason-mitchell.com/game-development/2d-particle-system-for-xna/">http://jason-mitchell.com/game-development/2d-particle-system-for-xna/</a> for a description of the original XNA project on CodePlex.  Some parts have changed but not drastically.</em>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>684</wp:post_id>
        <wp:post_date>2013-04-11 18:59:26</wp:post_date>
        <wp:post_date_gmt>2013-04-11 18:59:26</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>supernova-particle-system-for-monogame</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
        <category domain="post_tag" nicename="monogame"><![CDATA[monogame]]></category>
        <category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
        <category domain="post_tag" nicename="particle-system"><![CDATA[particle system]]></category>
        <category domain="post_tag" nicename="xna-2"><![CDATA[xna]]></category>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[64]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[particle system]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Supernova Particle System for MonoGame now available through NuGet and on GitHub. Supernova makes it easy to setup particle effects in your games!]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1458565541]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430599290;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:908;}i:1;a:1:{s:2:"id";i:202;}i:2;a:1:{s:2:"id";i:270;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>183</wp:comment_id>
            <wp:comment_author><![CDATA[Burstabubble Now Available on Windows Store | Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://jason-mitchell.com/game-development/burstabubble-now-available-windows-store/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-09-17 12:31:30</wp:comment_date>
            <wp:comment_date_gmt>2013-09-17 12:31:30</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[&#8230;] XNA again so a big thumbs up to those guys on the work they have done.  The game also makes use of my MonoGame particle effects library which is available on GitHub and [&#8230;]]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379421090.1335001;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379438126.4147501;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>Stringly - Dynamic Query Building Library</title>
        <link>http://jason-mitchell.com/software-development/stringly-a-dynamic-query-building-library/</link>
        <pubDate>Wed, 12 Jun 2013 18:09:35 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=700</guid>
        <description></description>
        <content:encoded><![CDATA[Stringly is a dynamic query building library written in C#.  It provides an interface for dynamically creating queries from string based inputs which is useful for scenarios where the structure of queries is determined at run time based on an external input.  Stringly works by building a collection of metadata which it can then use to build a query.

Find out more at <a href="https://github.com/jasonmitchell/stringly">https://github.com/jasonmitchell/stringly</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>700</wp:post_id>
        <wp:post_date>2013-06-12 18:09:35</wp:post_date>
        <wp:post_date_gmt>2013-06-12 18:09:35</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>stringly-a-dynamic-query-building-library</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="data-access"><![CDATA[data access]]></category>
        <category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[59]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[query]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[Stringly is a dynamic query building library written in C#. It provides an interface for dynamically creating queries from string based inputs.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1458951044]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>layout_key</wp:meta_key>
            <wp:meta_value><![CDATA[]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>post_slider_check_key</wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430675739;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:518;}i:1;a:1:{s:2:"id";i:407;}i:2;a:1:{s:2:"id";i:273;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>(Don&#039;t) Static All The Things!</title>
        <link>http://jason-mitchell.com/software-development/dont-static-all-the-things/</link>
        <pubDate>Wed, 21 Aug 2013 20:31:58 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=715</guid>
        <description></description>
        <content:encoded><![CDATA[<span style="line-height: 1.714285714; font-size: 1rem;"><img class="alignright" style="border: 1px solid #666666;" alt="Static All The Things" src="http://i.imgur.com/8vBAsrF.jpg" width="252" height="189" />Sometimes when you first start working on an existing project you come across some code that's a bit quirky or weird. This is normally due to personal preferences or misunderstandings but whatever the reason, you can live with it - it's not that bad. O</span><span style="line-height: 1.714285714; font-size: 1rem;">ther times you just come across code that makes you quietly weep as you resign yourself to spending the next few months in this hell; a .NET project which uses the "Static Everything" (anti-) pattern is one of those times (is this actually a pattern? I don't know but I'll be calling it a pattern throughout this post).  <em><strong>The Static Everything pattern is when core operations and business logic in a code base is mostly made up of static classes with static utility methods</strong></em> scattered everywhere; some of which may even have static "state" (!!).  This is typically accompanied by simple domain/model classes that simply define properties for an entity.</span>

<!--more-->
<h2>Why is this a problem?</h2>
Because I said so and I'm grumpy about having dealt with it before?  Partially yes but I don't expect you to accept that as a reason, fortunately there are real reasons for why this is a problem.

When you think about the core principles of Object Oriented Programming it's difficult to see how modelling most of your operations as static methods fits in. <em><strong>Essentially these methods are now globally accessible functions</strong></em>, something that fits in perfectly well in a language like PHP but feels slightly out of place in a fully object oriented language.

<em><strong>The Static Everything pattern encourages terrible abstractio</strong><strong>ns </strong></em>(if they can even be called that) in order to organise and group methods together.  In the beginning the classes might seem small and perfectly formed however over time they can easily grow into epic blob classes once we decide that we need to provide some very slight change in behaviour under very slightly different circumstances. What's a developer to do?  Copy the method and tweak the behaviour slightly? Create optional parameters or overloads? These are not ideal solutions and will lead to a maintainability nightmare over the following months and years.

As a consequence of using this pattern <em><strong>it will become more difficult to write testable code</strong></em>; not impossible, just more difficult.  Static methods are difficult to mock (the only third-party library I know of that does this is <a title="Typemock Isolator" href="http://www.typemock.com/isolator-product-page" target="_blank">Typemock Isolator</a>) and they don't lend themselves well to composition. My experience has been that composition generally isn't even attempted presumably because of the "inconvenience" of writing such code (and possibly the risk of parameter overload).  Instead <em><strong>dependencies are created inside the static methods</strong></em> to create little self-contained packets of functionality.  This really harms testability as we can no longer mock out a component which really should have had it's own set of tests and doesn't need to be tested again by everything that uses it.  On top of that the dependencies could possibly be performing expensive tasks such as communicating with a database which will impact on the performance of the tests.
<h2>A sure-fire way to violate the SOLID principles!</h2>
How does this approach help a developer adhere to the SOLID principles of Object Oriented Design? It doesn't really; it almost automatically violates the O-L-D and makes the S and I pretty difficult to adhere to.

<strong>S (<a title="Single responsibility principle" href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single responsibility principle</a>)
</strong>With the Static Everything pattern it's possible to adhere to the Single Responsibility Principle by having very specific static classes and methods.  Unfortunately the Static Everything pattern typically seems to use something along the line of "MyEntityManager" which defines every operation possible for a specific entity.  You could argue that managing an entity is a single responsibility but what does that even mean?  It's far to vague to be considered a single responsibility.

<strong>O (<a title="Open/closed principle" href="http://en.wikipedia.org/wiki/Open/closed_principle">Open/closed principle</a>)
</strong>This states <i>"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification".</i>  This is something that tends to be solved using inheritance and <a title="Polymorphism" href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" target="_blank">polymorphism</a> which obviously isn't applicable to <em><strong>static classes as they are inherently sealed and can't be extended</strong></em>.

<strong>L (<a title="Liskov substitution principle" href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov substitution principle</a>)</strong>
This principle says <em>“objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program”</em>.  Again we can't have subtypes of static classes so we can't substitute them with anything.

<strong>I (<a title="Interface segregation principle" href="http://en.wikipedia.org/wiki/Interface_segregation_principle">Interface segregation principle</a>)</strong>
<em>“Many client-specific interfaces are better than one general-purpose interface”.  </em>This is all about splitting an interface down into very specific components to reduce potential dependencies across code.  I guess if you squint really hard at this principle in the context of the Static Everything pattern you can make the definition of an "interface" really fuzzy and argue that it doesn't literally mean an actual interface and that your static methods are nicely broken down into logic groups of methods in a dedicated static class.  However this seems to be making life unnecessarily difficult when <em><strong>you could be using an object oriented language feature to adhere</strong></em> to this one.

<strong>D (<a title="Dependency inversion principle" href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency inversion principle</a>)</strong>
This says <em>“Depend upon Abstractions. Do not depend upon concretions”.</em>  <em><strong>We can't abstract static classes so they are automatically concrete</strong></em>.
<h2>When is static okay?</h2>
I've done a lot of grumping in this article about why Static Everything is bad but <strong>as always in software development when asked if something is right or wrong the answer is almost always "it depends"</strong>.  Static classes with static methods can definitely be useful in some cases; for example utility classes such as <a title="System.Convert" href="http://msdn.microsoft.com/en-us/library/system.convert.aspx" target="_blank">System.Convert</a> which is defined as a static class is fine because its methods are very granular operations that do not necessarily make sense in the context of a larger object.

Its also important to mention <a title="Extension Methods" href="http://msdn.microsoft.com/en-us/library/vstudio/bb383977.aspx" target="_blank">extension methods</a> in C#; strictly speaking these little bundles of magic are static classes with static methods defined in them however they operate very differently. In some cases it may be possible to swap out static helper/manager/utility methods and replace them with extension methods; the best example of this is the implementation of LINQ which has allowed developers to banish utility methods for commonly used list operations.

It's okay to use static classes with static methods if what you need to write is a true utility.  Just don't abuse it and use it for everything.
<h2>Arguments for Static Everything</h2>
Developers are an opinionated bunch; we have opinions on almost all aspects of software development (and computing in general). Some people love C#, some people hate it.  Some people love regions, <a title="Visual Studio Regions Make Me Cringe" href="http://jason-mitchell.com/software-development/visual-studio-regions-make-me-cringe/" target="_blank">some people hate them</a>. I know people who have argued that Static Everything is a great way to develop and say <em><strong>"I don't want to create an instance any time I want to do that"</strong> </em>or <em><strong>"static method calls are faster"</strong></em>.

Why is creating an instance a hassle?  Sounds like laziness to me.  By having instances you increase the maintainability of your code; it <em><strong>allows you to easily use language features to extend and compose objects </strong></em>without causing a mess.  Arguing that static method calls are faster is being slightly pedantic.  Yes it's true that they are faster but the performance hit in creating a new instance is so tiny it should have a near-zero impact on the performance of you application (unless you are doing something insane).
<h2>What's a developer to do?</h2>
In my mind the solution to these problems is very simple; object oriented languages give you the tools to deal with all of the problems I've talked about - use them! Create richer domains and entities, implement composable service classes, put simple utilities in extension methods where appropriate.  There's any number of ways to use the language features to avoid this situation.

If you are starting out on a new project then this shouldn't be a problem however if you are working on a project that already uses it then I feel for you; the refactoring effort for fixing the Static Everything pattern can be pretty huge (meaning there is likely no choice but to continue with it as it is).

The Static Everything approach seems like the path of least resistance for developers who just want to get the job done and don't necessarily care about <a title="Software Craftmanship" href="http://en.wikipedia.org/wiki/Software_Craftsmanship" target="_blank">software craftsmanship</a> or developers who don't like object oriented features - so why work with an object oriented language?]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>715</wp:post_id>
        <wp:post_date>2013-08-21 20:31:58</wp:post_date>
        <wp:post_date_gmt>2013-08-21 20:31:58</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>dont-static-all-the-things</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
        <category domain="post_tag" nicename="c-2"><![CDATA[c#]]></category>
        <category domain="post_tag" nicename="code-structure"><![CDATA[code structure]]></category>
        <category domain="post_tag" nicename="software-craftmanship"><![CDATA[software craftmanship]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <category domain="post_tag" nicename="standards"><![CDATA[standards]]></category>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[94]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[static]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[The Static Everything (anti-)pattern is one of those infuriating practices that can be seen all too often in software development but why is it so bad?]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_mess</wp:meta_key>
            <wp:meta_value><![CDATA[(Don't) Static All The Things! http://wp.me/ptJgm-bx]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1623482833]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430305433;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:202;}i:1;a:1:{s:2:"id";i:155;}i:2;a:1:{s:2:"id";i:561;}}}}]]></wp:meta_value>
        </wp:postmeta>
    </item>
    <item>
        <title>Visual Studio Regions Make Me Cringe</title>
        <link>http://jason-mitchell.com/software-development/visual-studio-regions-make-me-cringe/</link>
        <pubDate>Fri, 21 Jun 2013 12:52:04 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=723</guid>
        <description></description>
        <content:encoded><![CDATA[The topic of Visual Studio regions feature is one that seems to create divided opinions from developers who work with the IDE on a regular basis.  If you can't guess my opinion from the title of this article, I personally totally and utterly hate seeing regions in code.

<!--more-->

I never write regions in my own code and any time I open a file and see something like this:

<img class="alignnone" alt="Regions" src="http://i1288.photobucket.com/albums/b495/jmitch181/regions_zps14c63d6d.png" width="426" height="241" />

or this:

<img class="alignnone" alt="Regions" src="http://i1288.photobucket.com/albums/b495/jmitch181/regions2_zpsefc5ba3e.png" width="423" height="272" />

I feel like I die a little inside (obviously the examples above are just made up and a little pointless given that they are ~25 lines long).  If I need to work on a file I don't want to have to rummage through regions.  Sure I can use other file navigation features but perhaps I just want to quickly scan a file what then?  I need to expand them out first.  Not a massive deal since keyboard shortcuts exist for this but it's still an extra step.  And let's not forget about the extra clutterly lines we have in our file as a result of using regions.

When I rant about regions to a developer who loves them they laugh at me derisively for discarding their organisational nirvana in favour of scrolling endlessly and getting lost in code; I'm of the opinion that regions are essentially used to hide code.  <strong>Why hide code? </strong> Is it ugly? Or simply too long?

Regardless of the reason, if you feel that you need to hide code in order to keep your code readable and clear then you have an actual problem; <strong>one that isn't solved by hiding code away in regions</strong>.

<strong>The problem is only solved by consciously making an effort to write clear and readable code.</strong>  File length is not really a metric that can be used to indicate bad code and you may find there are times when large files are necessary but these occasions should not be due to simply bundling a whole bunch of vaguely related code together.  When adding any code to a class you should always consider if it logically makes sense to add it there or whether it would be better suited to its own dedicated class.  Trying to adhere the <a title="Single Responsibility Principle" href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">Single Responsibility Principle</a> as much as possible should help alleviate these issues and contribute to making you a much happier developer!

<strong>Recently I discovered a great Visual Studio plugin for those who hate regions.</strong>  It's fittingly called "I Hate #Regions" and can be downloaded at <a href="http://visualstudiogallery.msdn.microsoft.com/0ca60d35-1e02-43b7-bf59-ac7deb9afbca">http://visualstudiogallery.msdn.microsoft.com/0ca60d35-1e02-43b7-bf59-ac7deb9afbca</a>.  This plugin will automatically expand regions when you open a file and make the #region directives less visible.

<strong>However for those of you who are borderline insane </strong>you might be interested to try "Regionizer" (<a href="http://regionizer.codeplex.com/">http://regionizer.codeplex.com/</a>).  This "delightful" plugin will wrap your code in #regions and even alphabetize it for you.  Sweet...

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>723</wp:post_id>
        <wp:post_date>2013-06-21 12:52:04</wp:post_date>
        <wp:post_date_gmt>2013-06-21 12:52:04</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>visual-studio-regions-make-me-cringe</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
        <category domain="post_tag" nicename="regions"><![CDATA[regions]]></category>
        <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
        <category domain="post_tag" nicename="standards"><![CDATA[standards]]></category>
        <category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
            <wp:meta_value><![CDATA[89]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
            <wp:meta_value><![CDATA[visual studio regions]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
            <wp:meta_value><![CDATA[The topic of Visual Studio regions feature is one that seems to create divided opinions from developers who work with the IDE on a regular basis.]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_done_all</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wp_old_slug</wp:meta_key>
            <wp:meta_value><![CDATA[c-regions]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_wpas_skip_3372418</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_aioseop_disable</wp:meta_key>
            <wp:meta_value><![CDATA[on]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>dsq_thread_id</wp:meta_key>
            <wp:meta_value><![CDATA[1457396068]]></wp:meta_value>
        </wp:postmeta>
        <wp:postmeta>
            <wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
            <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1430259756;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:605;}i:1;a:1:{s:2:"id";i:518;}i:2;a:1:{s:2:"id";i:202;}}}}]]></wp:meta_value>
        </wp:postmeta>
        <wp:comment>
            <wp:comment_id>181</wp:comment_id>
            <wp:comment_author><![CDATA[(Don&#039;t) Static All The Things! | Jason Mitchell]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url>http://jason-mitchell.com/software-development/dont-static-all-the-things/</wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2013-08-21 10:26:32</wp:comment_date>
            <wp:comment_date_gmt>2013-08-21 10:26:32</wp:comment_date_gmt>
            <wp:comment_content><![CDATA[[&#8230;] Visual Studio Regions Make Me Cringe [&#8230;]]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type>pingback</wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1377080792.103375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1377121305.415875;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
        <wp:comment>
            <wp:comment_id>2558</wp:comment_id>
            <wp:comment_author><![CDATA[Supposedly]]></wp:comment_author>
            <wp:comment_author_email></wp:comment_author_email>
            <wp:comment_author_url></wp:comment_author_url>
            <wp:comment_author_IP></wp:comment_author_IP>
            <wp:comment_date>2014-08-07 04:34:19</wp:comment_date>
            <wp:comment_date_gmt>2014-08-07 04:34:19</wp:comment_date_gmt>
            <wp:comment_content><![CDATA["Why hide code?  Is it ugly? Or simply too long?"


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This]]></wp:comment_content>
            <wp:comment_approved>1</wp:comment_approved>
            <wp:comment_type></wp:comment_type>
            <wp:comment_parent>0</wp:comment_parent>
            <wp:comment_user_id>0</wp:comment_user_id>
            <wp:commentmeta>
                <wp:meta_key>akismet_result</wp:meta_key>
                <wp:meta_value><![CDATA[false]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407386059.1790619;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
            </wp:commentmeta>
            <wp:commentmeta>
                <wp:meta_key>akismet_history</wp:meta_key>
                <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407534424.9720311;s:7:"message";s:47:"jmitch18 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jmitch18";}]]></wp:meta_value>
            </wp:commentmeta>
        </wp:comment>
    </item>
    <item>
        <title>My blog has moved!</title>
        <link>http://jason-mitchell.com/uncategorized/my-blog-has-moved/</link>
        <pubDate>Sat, 09 May 2015 09:59:39 +0000</pubDate>
        <dc:creator><![CDATA[jmitch18]]></dc:creator>
        <guid isPermaLink="false">http://jason-mitchell.com/?p=1105</guid>
        <description></description>
        <content:encoded><![CDATA[My blog has moved to <a href="http://json.codes">http://json.codes</a>]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>1105</wp:post_id>
        <wp:post_date>2015-05-09 09:59:39</wp:post_date>
        <wp:post_date_gmt>2015-05-09 09:59:39</wp:post_date_gmt>
        <wp:comment_status>open</wp:comment_status>
        <wp:ping_status>open</wp:ping_status>
        <wp:post_name>my-blog-has-moved</wp:post_name>
        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password></wp:post_password>
        <wp:is_sticky>1</wp:is_sticky>
        <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
        <wp:postmeta>
            <wp:meta_key>_edit_last</wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:postmeta>
    </item>
</channel>
</rss>
